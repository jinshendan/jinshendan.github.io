<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Shendan&#39;s blog</title>
  <subtitle>申旦的博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://jinshendan.github.io/"/>
  <updated>2017-12-21T21:12:52.000Z</updated>
  <id>http://jinshendan.github.io/</id>
  
  <author>
    <name>Shendan JIN</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Palindrome Number - Leetcode A9</title>
    <link href="http://jinshendan.github.io/Palindrome-Number.html"/>
    <id>http://jinshendan.github.io/Palindrome-Number.html</id>
    <published>2017-12-21T21:11:36.000Z</published>
    <updated>2017-12-21T21:12:52.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><p><a href="https://leetcode.com/problems/palindrome-number/description/" target="_blank" rel="external">Problem description</a></p>
<h2 id="Python-Implementation"><a href="#Python-Implementation" class="headerlink" title="Python Implementation"></a>Python Implementation</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">isPalindrome</span><span class="params">(self, x)</span>:</span></div><div class="line">		<span class="string">"""</span></div><div class="line">		:type x: int</div><div class="line">		:rtype: bool</div><div class="line">		"""</div><div class="line"></div><div class="line">		<span class="keyword">if</span> x &lt; <span class="number">0</span>:</div><div class="line">			<span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">		y = <span class="number">0</span></div><div class="line">		t = x</div><div class="line">		<span class="keyword">while</span> t &gt; <span class="number">0</span>:</div><div class="line">			y = y * <span class="number">10</span> + (t % <span class="number">10</span>)</div><div class="line">			t = t // <span class="number">10</span></div><div class="line">		print(y)</div><div class="line">		<span class="keyword">return</span> x == y</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;Problem&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/palindrome-
    
    </summary>
    
      <category term="Leetcode" scheme="http://jinshendan.github.io/categories/Leetcode/"/>
    
    
  </entry>
  
  <entry>
    <title>Atoi - Leetcode A8</title>
    <link href="http://jinshendan.github.io/Atoi.html"/>
    <id>http://jinshendan.github.io/Atoi.html</id>
    <published>2017-12-21T14:37:51.000Z</published>
    <updated>2017-12-21T14:42:21.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><p><a href="https://leetcode.com/problems/string-to-integer-atoi/description/" target="_blank" rel="external">Problem description</a></p>
<p>Implement atoi to convert a string to an integer.</p>
<p>Requirements for atoi:<br>The function first discards as many whitespace characters as necessary until the first non-whitespace character is found. Then, starting from this character, takes an optional initial plus or minus sign followed by as many numerical digits as possible, and interprets them as a numerical value.</p>
<p>The string can contain additional characters after those that form the integral number, which are ignored and have no effect on the behavior of this function.</p>
<p>If the first sequence of non-whitespace characters in str is not a valid integral number, or if no such sequence exists because either str is empty or it contains only whitespace characters, no conversion is performed.</p>
<p>If no valid conversion could be performed, a zero value is returned. If the correct value is out of the range of representable values, INT_MAX (2147483647) or INT_MIN (-2147483648) is returned.</p>
<a id="more"></a>
<h2 id="Python-Implementation"><a href="#Python-Implementation" class="headerlink" title="Python Implementation"></a>Python Implementation</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">myAtoi</span><span class="params">(self, str)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type str: str</div><div class="line">        :rtype: int</div><div class="line">        """</div><div class="line">        <span class="comment"># discard whitespace</span></div><div class="line">        str = str.strip()</div><div class="line">        </div><div class="line">        sign = <span class="number">1</span></div><div class="line">        i = <span class="number">0</span></div><div class="line">        <span class="keyword">if</span> (str == <span class="string">""</span>):</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span></div><div class="line">            </div><div class="line">        <span class="keyword">if</span> str[<span class="number">0</span>] == <span class="string">'+'</span>:</div><div class="line">            sign = <span class="number">1</span></div><div class="line">            i += <span class="number">1</span></div><div class="line">        <span class="keyword">elif</span> str[<span class="number">0</span>] == <span class="string">'-'</span>:</div><div class="line">            sign = <span class="number">-1</span></div><div class="line">            i += <span class="number">1</span></div><div class="line">        </div><div class="line">        ans = <span class="number">0</span></div><div class="line">        <span class="keyword">while</span> i &lt; len(str) <span class="keyword">and</span> str[i].isdigit():</div><div class="line">            ans = ans * <span class="number">10</span> + int(str[i])</div><div class="line">            i += <span class="number">1</span></div><div class="line"></div><div class="line">        ans = ans * sign</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (i == <span class="number">0</span> <span class="keyword">and</span> str[<span class="number">0</span>] <span class="keyword">not</span> <span class="keyword">in</span> [<span class="string">'+'</span>, <span class="string">'-'</span>]):</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span></div><div class="line">        <span class="keyword">if</span> ans &gt; (<span class="number">1</span>&lt;&lt;<span class="number">31</span>)<span class="number">-1</span>:</div><div class="line">            <span class="keyword">return</span> (<span class="number">1</span>&lt;&lt;<span class="number">31</span>)<span class="number">-1</span></div><div class="line">        <span class="keyword">if</span> ans &lt; -(<span class="number">1</span>&lt;&lt;<span class="number">31</span>):</div><div class="line">            <span class="keyword">return</span> -(<span class="number">1</span>&lt;&lt;<span class="number">31</span>)</div><div class="line"></div><div class="line">        <span class="keyword">return</span> ans</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;Problem&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/string-to-integer-atoi/description/&quot;&gt;Problem description&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Implement atoi to convert a string to an integer.&lt;/p&gt;
&lt;p&gt;Requirements for atoi:&lt;br&gt;The function first discards as many whitespace characters as necessary until the first non-whitespace character is found. Then, starting from this character, takes an optional initial plus or minus sign followed by as many numerical digits as possible, and interprets them as a numerical value.&lt;/p&gt;
&lt;p&gt;The string can contain additional characters after those that form the integral number, which are ignored and have no effect on the behavior of this function.&lt;/p&gt;
&lt;p&gt;If the first sequence of non-whitespace characters in str is not a valid integral number, or if no such sequence exists because either str is empty or it contains only whitespace characters, no conversion is performed.&lt;/p&gt;
&lt;p&gt;If no valid conversion could be performed, a zero value is returned. If the correct value is out of the range of representable values, INT_MAX (2147483647) or INT_MIN (-2147483648) is returned.&lt;/p&gt;
    
    </summary>
    
      <category term="Leetcode" scheme="http://jinshendan.github.io/categories/Leetcode/"/>
    
    
      <category term="string" scheme="http://jinshendan.github.io/tags/string/"/>
    
  </entry>
  
  <entry>
    <title>Reverse Integer - Leetcode A7</title>
    <link href="http://jinshendan.github.io/Reverse-Integer.html"/>
    <id>http://jinshendan.github.io/Reverse-Integer.html</id>
    <published>2017-12-20T22:05:19.000Z</published>
    <updated>2017-12-21T14:43:30.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><p><a href="https://leetcode.com/problems/reverse-integer/description/" target="_blank" rel="external">Problem description</a></p>
<p>Given a 32-bit signed integer, reverse digits of an integer.</p>
<p>Example 1:</p>
<p>Input: 123<br>Output:  321<br>Example 2:</p>
<p>Input: -123<br>Output: -321<br>Example 3:</p>
<p>Input: 120<br>Output: 21<br>Note:<br>Assume we are dealing with an environment which could only hold integers within the 32-bit signed integer range. For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.</p>
<a id="more"></a>
<h2 id="Python-“C-style”-Implementation"><a href="#Python-“C-style”-Implementation" class="headerlink" title="Python “C-style” Implementation"></a>Python “C-style” Implementation</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">reverse</span><span class="params">(self, x)</span>:</span></div><div class="line">		<span class="string">"""</span></div><div class="line">		:type x: int</div><div class="line">		:rtype: int</div><div class="line">		"""</div><div class="line"></div><div class="line">		sign = <span class="number">1</span></div><div class="line">		<span class="keyword">if</span> (x &lt; <span class="number">0</span>):</div><div class="line">			sign = <span class="number">-1</span></div><div class="line">			x = -x</div><div class="line"></div><div class="line">		ans = <span class="number">0</span></div><div class="line">		<span class="keyword">while</span> (x &gt; <span class="number">0</span>):</div><div class="line">			ans = ans * <span class="number">10</span> + x % <span class="number">10</span></div><div class="line">			x = x // <span class="number">10</span></div><div class="line">			<span class="keyword">if</span> ans*sign &gt; ((<span class="number">1</span> &lt;&lt; <span class="number">31</span>) - <span class="number">1</span>) <span class="keyword">or</span> ans*sign &lt; -(<span class="number">1</span> &lt;&lt; <span class="number">31</span>):</div><div class="line">				ans = <span class="number">0</span></div><div class="line">				<span class="keyword">break</span></div><div class="line"></div><div class="line">		<span class="keyword">return</span> ans*sign</div></pre></td></tr></table></figure>
<h2 id="Python-Implementation"><a href="#Python-Implementation" class="headerlink" title="Python Implementation"></a>Python Implementation</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">reverse</span><span class="params">(self, x)</span>:</span></div><div class="line">		<span class="string">"""</span></div><div class="line">		:type x: int</div><div class="line">		:rtype: int</div><div class="line">		"""</div><div class="line">		MaxInt = (<span class="number">1</span>&lt;&lt;<span class="number">31</span>)<span class="number">-1</span></div><div class="line">		MinInt = -(<span class="number">1</span>&lt;&lt;<span class="number">31</span>)</div><div class="line">		<span class="keyword">if</span> x &gt; <span class="number">0</span>:</div><div class="line">			ans = int(str(x)[::<span class="number">-1</span>])</div><div class="line">		<span class="keyword">else</span>:</div><div class="line">			ans = int(str(-x)[::<span class="number">-1</span>])*(<span class="number">-1</span>)</div><div class="line">		<span class="keyword">if</span> (ans &gt; MaxInt <span class="keyword">or</span> ans &lt; MinInt):</div><div class="line">			ans = <span class="number">0</span></div><div class="line">		<span class="keyword">return</span> ans</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;Problem&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/reverse-integer/description/&quot;&gt;Problem description&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Given a 32-bit signed integer, reverse digits of an integer.&lt;/p&gt;
&lt;p&gt;Example 1:&lt;/p&gt;
&lt;p&gt;Input: 123&lt;br&gt;Output:  321&lt;br&gt;Example 2:&lt;/p&gt;
&lt;p&gt;Input: -123&lt;br&gt;Output: -321&lt;br&gt;Example 3:&lt;/p&gt;
&lt;p&gt;Input: 120&lt;br&gt;Output: 21&lt;br&gt;Note:&lt;br&gt;Assume we are dealing with an environment which could only hold integers within the 32-bit signed integer range. For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.&lt;/p&gt;
    
    </summary>
    
      <category term="Leetcode" scheme="http://jinshendan.github.io/categories/Leetcode/"/>
    
    
      <category term="Integer" scheme="http://jinshendan.github.io/tags/Integer/"/>
    
  </entry>
  
  <entry>
    <title>ZigZag Conversion - Leetcode A6</title>
    <link href="http://jinshendan.github.io/ZigZag-Conversion.html"/>
    <id>http://jinshendan.github.io/ZigZag-Conversion.html</id>
    <published>2017-12-20T16:06:37.000Z</published>
    <updated>2017-12-20T16:48:04.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><p><a href="https://leetcode.com/problems/zigzag-conversion/description/" target="_blank" rel="external">Problem description</a></p>
<p>The string “PAYPALISHIRING” is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">P   A   H   N</div><div class="line">A P L S I I G</div><div class="line">Y   I   R</div></pre></td></tr></table></figure>
<p>And then read line by line: “PAHNAPLSIIGYIR”<br>Write the code that will take a string and make this conversion given a number of rows:</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="built_in">string</span> <span class="title">convert</span><span class="params">(<span class="built_in">string</span> text, <span class="keyword">int</span> nRows)</span></span>;</div></pre></td></tr></table></figure>
<p>convert(“PAYPALISHIRING”, 3) should return “PAHNAPLSIIGYIR”.</p>
<a id="more"></a>
<h2 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h2><ul>
<li>n = number of raws</li>
<li>For first and last line, step = 2n-2</li>
<li>For ith lines (except the first and the last), step = 2n-2-2*i, 2n-2</li>
</ul>
<h2 id="Python-Implementation"><a href="#Python-Implementation" class="headerlink" title="Python Implementation"></a>Python Implementation</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">convert</span><span class="params">(self, s, numRows)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type s: str</div><div class="line">        :type numRows: int</div><div class="line">        :rtype: str</div><div class="line">        """</div><div class="line">        </div><div class="line">        <span class="keyword">if</span> (numRows == <span class="number">1</span>):</div><div class="line">        	<span class="keyword">return</span> s</div><div class="line">        step = numRows * <span class="number">2</span> - <span class="number">2</span></div><div class="line">        ans = <span class="string">""</span></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(numRows):</div><div class="line">        	index = i</div><div class="line">        	step2 = step - i * <span class="number">2</span></div><div class="line">        	<span class="keyword">if</span> (index &gt;= len(s)):</div><div class="line">        		<span class="keyword">break</span></div><div class="line">        	ans += s[index]</div><div class="line">        	<span class="keyword">while</span> (<span class="number">1</span>):</div><div class="line">        		<span class="keyword">if</span> (step2 != <span class="number">0</span> <span class="keyword">and</span> step2 != step):</div><div class="line">        			<span class="keyword">if</span> (index + step2 &gt;= len(s)):</div><div class="line">        				<span class="keyword">break</span></div><div class="line">        			ans += s[index + step2]</div><div class="line">        		</div><div class="line">        		index += step</div><div class="line">        		<span class="keyword">if</span> (index &gt;= len(s)):</div><div class="line">        			<span class="keyword">break</span></div><div class="line">        		ans += s[index]        		</div><div class="line">        <span class="keyword">return</span> ans</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;Problem&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/zigzag-conversion/description/&quot;&gt;Problem description&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The string “PAYPALISHIRING” is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;P   A   H   N&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;A P L S I I G&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Y   I   R&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;And then read line by line: “PAHNAPLSIIGYIR”&lt;br&gt;Write the code that will take a string and make this conversion given a number of rows:&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;convert&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt; text, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; nRows)&lt;/span&gt;&lt;/span&gt;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;convert(“PAYPALISHIRING”, 3) should return “PAHNAPLSIIGYIR”.&lt;/p&gt;
    
    </summary>
    
      <category term="Leetcode" scheme="http://jinshendan.github.io/categories/Leetcode/"/>
    
    
      <category term="Maths" scheme="http://jinshendan.github.io/tags/Maths/"/>
    
  </entry>
  
  <entry>
    <title>Longest Palindromic Substring - Leetcode A5</title>
    <link href="http://jinshendan.github.io/Longest-Palindromic-Substring.html"/>
    <id>http://jinshendan.github.io/Longest-Palindromic-Substring.html</id>
    <published>2017-12-20T14:20:59.000Z</published>
    <updated>2017-12-20T16:10:05.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><p><a href="https://leetcode.com/problems/longest-palindromic-substring/description/" target="_blank" rel="external">Problem description</a><br>Given a string s, find the longest palindromic substring in s. You may assume that the maximum length of s is 1000.</p>
<p>Example:</p>
<p>Input: “babad”</p>
<p>Output: “bab”</p>
<p>Note: “aba” is also a valid answer.</p>
<a id="more"></a>
<h2 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h2><ul>
<li>Dynamic programming, O(n^2)</li>
<li>s[i..j] is a palindromic substring iff s[i+1..j-1] is and s[i] == s[j]</li>
</ul>
<h2 id="Python-Implementation"><a href="#Python-Implementation" class="headerlink" title="Python Implementation"></a>Python Implementation</h2><ul>
<li>Complexity: O(n^2)</li>
<li>Time limit exceeded<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">longestPalindrome</span><span class="params">(self, s)</span>:</span></div><div class="line">		<span class="string">"""</span></div><div class="line">		:type s: str</div><div class="line">		:rtype: str</div><div class="line">		"""</div><div class="line">		f = [[ <span class="keyword">False</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(len(s) + <span class="number">1</span>)] <span class="keyword">for</span> i <span class="keyword">in</span> range(len(s))]</div><div class="line">		<span class="keyword">for</span> i <span class="keyword">in</span> range(len(s)):</div><div class="line">			f[i][<span class="number">1</span>] = <span class="keyword">True</span></div><div class="line">			f[i][<span class="number">0</span>] = <span class="keyword">True</span></div><div class="line">		ans = <span class="number">1</span></div><div class="line">		ansi = <span class="number">0</span></div><div class="line">		lens = len(s)</div><div class="line">		<span class="keyword">for</span> L <span class="keyword">in</span> range(<span class="number">2</span>, lens+<span class="number">1</span>):</div><div class="line">			<span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, lens + <span class="number">1</span> - L):</div><div class="line">				<span class="keyword">if</span> (s[i] == s[i+L<span class="number">-1</span>]):</div><div class="line">					f[i][L] = f[i+<span class="number">1</span>][L<span class="number">-2</span>]</div><div class="line">					<span class="keyword">if</span> (f[i][L]):</div><div class="line">						ans = L</div><div class="line">						ansi = i</div><div class="line">		<span class="keyword">return</span> s[ansi: ansi + ans]</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="C-Implementation"><a href="#C-Implementation" class="headerlink" title="C++ Implementation"></a>C++ Implementation</h2><ul>
<li>Complexity: O(n^2)</li>
<li>Accepted<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="built_in">string</span> <span class="title">longestPalindrome</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> f[<span class="number">1000</span>][<span class="number">1005</span>];</div><div class="line">        <span class="built_in">memset</span>(f, <span class="number">0</span>, <span class="keyword">sizeof</span>(f));</div><div class="line">        <span class="keyword">int</span> n = s.length();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</div><div class="line">        	f[i][<span class="number">0</span>] = f[i][<span class="number">1</span>] = <span class="number">1</span>;</div><div class="line">        <span class="keyword">int</span> ans = <span class="number">1</span>;</div><div class="line">        <span class="keyword">int</span> ansi = <span class="number">0</span>;</div><div class="line">       	<span class="keyword">for</span> (<span class="keyword">int</span> L = <span class="number">2</span>; L &lt;= n; L++) &#123;</div><div class="line">       		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n - L; i++)&#123;</div><div class="line">       			<span class="keyword">if</span> (s[i] == s[i + L <span class="number">-1</span>])</div><div class="line">       				f[i][L] = f[i+<span class="number">1</span>][L<span class="number">-2</span>];</div><div class="line">       			<span class="keyword">if</span> (f[i][L])&#123;</div><div class="line">       				ans = L;</div><div class="line">       				ansi = i;</div><div class="line">       			&#125;</div><div class="line">       		&#125;</div><div class="line">       	&#125;</div><div class="line">       	<span class="keyword">return</span> s.substr(ansi, ans);</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;Problem&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/longest-palindromic-substring/description/&quot;&gt;Problem description&lt;/a&gt;&lt;br&gt;Given a string s, find the longest palindromic substring in s. You may assume that the maximum length of s is 1000.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;p&gt;Input: “babad”&lt;/p&gt;
&lt;p&gt;Output: “bab”&lt;/p&gt;
&lt;p&gt;Note: “aba” is also a valid answer.&lt;/p&gt;
    
    </summary>
    
      <category term="Leetcode" scheme="http://jinshendan.github.io/categories/Leetcode/"/>
    
    
      <category term="DP" scheme="http://jinshendan.github.io/tags/DP/"/>
    
  </entry>
  
  <entry>
    <title>Median of two sorted arrays - Leetcode A4</title>
    <link href="http://jinshendan.github.io/Median-of-two-sorted-arrays.html"/>
    <id>http://jinshendan.github.io/Median-of-two-sorted-arrays.html</id>
    <published>2017-12-19T21:45:53.000Z</published>
    <updated>2017-12-20T15:51:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><p><a href="https://leetcode.com/problems/median-of-two-sorted-arrays/description/" target="_blank" rel="external">Problem description</a></p>
<p>There are two sorted arrays nums1 and nums2 of size m and n respectively.</p>
<p>Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).</p>
<a id="more"></a>
<h2 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h2><ul>
<li>Binary Search</li>
<li>K-th elements in two sorted arrays</li>
</ul>
<h2 id="Python-Implementation"><a href="#Python-Implementation" class="headerlink" title="Python Implementation"></a>Python Implementation</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">get_k_th</span><span class="params">(self, a, b, n, m, k)</span>:</span></div><div class="line">		<span class="keyword">if</span> (n &lt;= <span class="number">0</span>): <span class="keyword">return</span> b[k<span class="number">-1</span>]</div><div class="line">		<span class="keyword">if</span> (m &lt;= <span class="number">0</span>): <span class="keyword">return</span> a[k<span class="number">-1</span>]</div><div class="line">		<span class="keyword">if</span> (k == <span class="number">1</span>): <span class="keyword">return</span> min(a[<span class="number">0</span>], b[<span class="number">0</span>])</div><div class="line">		<span class="keyword">if</span> (b[m // <span class="number">2</span>] &gt;= a[n // <span class="number">2</span>]):</div><div class="line">			<span class="keyword">if</span> n//<span class="number">2</span> + m // <span class="number">2</span> + <span class="number">2</span> &gt; k:</div><div class="line">				<span class="keyword">return</span> self.get_k_th(a, b, n, m//<span class="number">2</span>, k)</div><div class="line">			<span class="keyword">else</span>:</div><div class="line">				<span class="keyword">return</span> self.get_k_th(a[n//<span class="number">2</span>+<span class="number">1</span>:], b, n - (n//<span class="number">2</span>+<span class="number">1</span>), m, k - (n // <span class="number">2</span> + <span class="number">1</span>))</div><div class="line">		<span class="keyword">else</span>:</div><div class="line">			<span class="keyword">if</span> n//<span class="number">2</span> + m // <span class="number">2</span> + <span class="number">2</span> &gt; k:</div><div class="line">				<span class="keyword">return</span> self.get_k_th(a, b, n//<span class="number">2</span>, m, k)</div><div class="line">			<span class="keyword">else</span>:</div><div class="line">				<span class="keyword">return</span> self.get_k_th(a, b[m//<span class="number">2</span>+<span class="number">1</span>:], n, m - (m//<span class="number">2</span>+<span class="number">1</span>), k - (m // <span class="number">2</span> + <span class="number">1</span>))</div><div class="line"></div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">findMedianSortedArrays</span><span class="params">(self, nums1, nums2)</span>:</span></div><div class="line">		<span class="string">"""</span></div><div class="line">		:type nums1: List[int]</div><div class="line">		:type nums2: List[int]</div><div class="line">		:rtype: float</div><div class="line">		"""</div><div class="line"></div><div class="line">		n = len(nums1)</div><div class="line">		m = len(nums2)</div><div class="line">		<span class="keyword">if</span> (n + m) % <span class="number">2</span> == <span class="number">0</span>:</div><div class="line">			<span class="keyword">return</span> (self.get_k_th(nums1, nums2, n, m, (n+m)//<span class="number">2</span>) + self.get_k_th(nums1, nums2, n, m, (n+m)//<span class="number">2</span> +<span class="number">1</span>)) / <span class="number">2</span></div><div class="line">		<span class="keyword">else</span>:</div><div class="line">			<span class="keyword">return</span> self.get_k_th(nums1, nums2, n, m, (n+m)//<span class="number">2</span>+<span class="number">1</span>)</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;Problem&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/median-of-two-sorted-arrays/description/&quot;&gt;Problem description&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;There are two sorted arrays nums1 and nums2 of size m and n respectively.&lt;/p&gt;
&lt;p&gt;Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).&lt;/p&gt;
    
    </summary>
    
      <category term="Leetcode" scheme="http://jinshendan.github.io/categories/Leetcode/"/>
    
    
      <category term="Binary Search" scheme="http://jinshendan.github.io/tags/Binary-Search/"/>
    
  </entry>
  
  <entry>
    <title>Longest substring without repeating characters - Leetcode A3</title>
    <link href="http://jinshendan.github.io/longest-substring-without-repeating-characters.html"/>
    <id>http://jinshendan.github.io/longest-substring-without-repeating-characters.html</id>
    <published>2017-12-19T21:36:31.000Z</published>
    <updated>2017-12-19T21:44:09.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><p><a href="https://leetcode.com/problems/longest-substring-without-repeating-characters/description/" target="_blank" rel="external">Problem description</a>.</p>
<p>Given a string, find the length of the longest substring without repeating characters.</p>
<p>Examples:</p>
<p>Given “abcabcbb”, the answer is “abc”, which the length is 3.</p>
<p>Given “bbbbb”, the answer is “b”, with the length of 1.</p>
<p>Given “pwwkew”, the answer is “wke”, with the length of 3. Note that the answer must be a substring, “pwke” is a subsequence and not a substring.</p>
<a id="more"></a>
<h2 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h2><ul>
<li>Sliding window</li>
</ul>
<h2 id="Python-Implementation"><a href="#Python-Implementation" class="headerlink" title="Python Implementation"></a>Python Implementation</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(self, s)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type s: str</div><div class="line">        :rtype: int</div><div class="line">        """</div><div class="line">        ss = set()</div><div class="line">        start = <span class="number">0</span></div><div class="line">        maxlen = <span class="number">0</span></div><div class="line">        <span class="keyword">for</span> i, x <span class="keyword">in</span> enumerate(s):</div><div class="line">        	<span class="keyword">while</span> x <span class="keyword">in</span> ss:</div><div class="line">        		ss.remove(s[start])</div><div class="line">        		start += <span class="number">1</span></div><div class="line">        	ss.add(x)</div><div class="line">        	maxlen = max(maxlen, i - start + <span class="number">1</span>)</div><div class="line">        	<span class="comment"># print(start, i, maxlen)</span></div><div class="line">        <span class="keyword">return</span> maxlen</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;Problem&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/longest-substring-without-repeating-characters/description/&quot;&gt;Problem description&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Given a string, find the length of the longest substring without repeating characters.&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;p&gt;Given “abcabcbb”, the answer is “abc”, which the length is 3.&lt;/p&gt;
&lt;p&gt;Given “bbbbb”, the answer is “b”, with the length of 1.&lt;/p&gt;
&lt;p&gt;Given “pwwkew”, the answer is “wke”, with the length of 3. Note that the answer must be a substring, “pwke” is a subsequence and not a substring.&lt;/p&gt;
    
    </summary>
    
      <category term="Leetcode" scheme="http://jinshendan.github.io/categories/Leetcode/"/>
    
    
      <category term="sliding window" scheme="http://jinshendan.github.io/tags/sliding-window/"/>
    
  </entry>
  
  <entry>
    <title>Add Two Numbers - Leetcode A2</title>
    <link href="http://jinshendan.github.io/Add-Two-Numbers.html"/>
    <id>http://jinshendan.github.io/Add-Two-Numbers.html</id>
    <published>2017-12-19T21:25:52.000Z</published>
    <updated>2017-12-19T21:40:08.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><p><a href="https://leetcode.com/problems/add-two-numbers/description/" target="_blank" rel="external">Problem description</a>.</p>
<p>You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.</p>
<p>You may assume the two numbers do not contain any leading zero, except the number 0 itself.</p>
<a id="more"></a>
<h2 id="Python-Implementation"><a href="#Python-Implementation" class="headerlink" title="Python Implementation"></a>Python Implementation</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Definition for singly-linked list.</span></div><div class="line"><span class="comment"># class ListNode(object):</span></div><div class="line"><span class="comment">#     def __init__(self, x):</span></div><div class="line"><span class="comment">#         self.val = x</span></div><div class="line"><span class="comment">#         self.next = None</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addTwoNumbers</span><span class="params">(self, l1, l2)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type l1: ListNode</div><div class="line">        :type l2: ListNode</div><div class="line">        :rtype: ListNode</div><div class="line">        """</div><div class="line">        tete = ListNode(<span class="number">0</span>)</div><div class="line">        pre = tete</div><div class="line">        t = <span class="number">0</span></div><div class="line">        <span class="keyword">while</span> (l1 != <span class="keyword">None</span> <span class="keyword">or</span> l2 != <span class="keyword">None</span>):</div><div class="line">            node = ListNode(<span class="number">0</span>)</div><div class="line">            pre.next = node</div><div class="line">            <span class="keyword">if</span> (l1 == <span class="keyword">None</span>):</div><div class="line">                node.val =  (l2.val + t) % <span class="number">10</span></div><div class="line">                t = (l2.val + t) // <span class="number">10</span></div><div class="line">                l2 = l2.next</div><div class="line">            <span class="keyword">elif</span> (l2 == <span class="keyword">None</span>):</div><div class="line">                node.val = (l1.val + t) % <span class="number">10</span></div><div class="line">                t = (l1.val + t) // <span class="number">10</span></div><div class="line">                l1 = l1.next</div><div class="line">            <span class="keyword">else</span>: </div><div class="line">                node.val = (l1.val + l2.val + t) % <span class="number">10</span></div><div class="line">                t = (l1.val + l2.val + t) // <span class="number">10</span></div><div class="line">                l1 = l1.next</div><div class="line">                l2 = l2.next</div><div class="line">            pre = node</div><div class="line">        </div><div class="line">        <span class="keyword">if</span> (t &gt; <span class="number">0</span>):</div><div class="line">            node = ListNode(t)</div><div class="line">            pre.next = node</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> tete.next</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;Problem&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/add-two-numbers/description/&quot;&gt;Problem description&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.&lt;/p&gt;
&lt;p&gt;You may assume the two numbers do not contain any leading zero, except the number 0 itself.&lt;/p&gt;
    
    </summary>
    
      <category term="Leetcode" scheme="http://jinshendan.github.io/categories/Leetcode/"/>
    
    
      <category term="linked list" scheme="http://jinshendan.github.io/tags/linked-list/"/>
    
  </entry>
  
  <entry>
    <title>Approximation algorithm of Knapsack problem</title>
    <link href="http://jinshendan.github.io/APX-knapsack.html"/>
    <id>http://jinshendan.github.io/APX-knapsack.html</id>
    <published>2017-08-16T23:13:00.000Z</published>
    <updated>2017-11-01T10:42:41.000Z</updated>
    
    <content type="html"><![CDATA[<script type="text/x-mathjax-config">
MathJax.Hub.Config({
tex2jax: {inlineMath: [['$','$'], ['\\(','\\)']]}
});
</script>

<script type="text/javascript" async src="https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-MML-AM_CHTML">
</script>

<a id="more"></a>
<h2 id="Knapsack-problem"><a href="#Knapsack-problem" class="headerlink" title="Knapsack problem"></a>Knapsack problem</h2><hr>
<p>We have an algorithm (dynamic programming) when values are small integers.</p>
<h3 id="Approximation-algorithm"><a href="#Approximation-algorithm" class="headerlink" title="Approximation algorithm"></a>Approximation algorithm</h3><hr>
<ul>
<li><p>Idea: modify input so that values are small integers and we can then use the previous algorithm as a black box.</p>
</li>
<li><p>Scale and round.</p>
</li>
</ul>
<h3 id="Algorithm-description"><a href="#Algorithm-description" class="headerlink" title="Algorithm description"></a>Algorithm description</h3><hr>
<ol>
<li>Discard items that don’t fit in the knapsack.</li>
<li>Multiply each value by $\alpha = \frac{N}{max_j {v_j}} $ so that the values become small, where $N$ is the maximum scaled value, $$v_i \leftarrow v_i * \alpha$$.</li>
<li>Round values to integers and use the DP to solve the reduced problem.</li>
</ol>
<p>We have to choose $N$,</p>
<ul>
<li>small enough that the runtime is polynomial;</li>
<li>large enough that the result is closed to OPT.</li>
</ul>
<h3 id="Runtime-analysis"><a href="#Runtime-analysis" class="headerlink" title="Runtime analysis"></a>Runtime analysis</h3><hr>
<ul>
<li>DP: $O(n*m)$.</li>
<li>Apx: $m = n*N$, $O(n^2N)$.</li>
</ul>
<h3 id="Approximation-ratio-analysis"><a href="#Approximation-ratio-analysis" class="headerlink" title="Approximation ratio analysis"></a>Approximation ratio analysis</h3><hr>
<ul>
<li>Let $S$ be output items, then $S$ is optimal for the reduced input.</li>
<li>Let $S^{*}$ be optimal items, then $S$ is optimal for the scaled unrounded input since scaling do not change structure.</li>
</ul>
<ul>
<li>$Value(S) = \sum_S{v_i} = \frac{1}{\alpha}\sum_S(\alpha v_i)$, then $Value(S) \geq \frac{1}{\alpha}\sum_S{v^{‘}_i}$.</li>
<li>\(\sum_S v^{‘}<em>i \geq \sum</em>{S^{*}} \sum_S \)</li>
</ul>
<p>since $S$ is optimal for reduced problem.</p>
]]></content>
    
    <summary type="html">
    
      &lt;script type=&quot;text/x-mathjax-config&quot;&gt;
MathJax.Hub.Config({
tex2jax: {inlineMath: [[&#39;$&#39;,&#39;$&#39;], [&#39;\\(&#39;,&#39;\\)&#39;]]}
});
&lt;/script&gt;

&lt;script type=&quot;text/javascript&quot; async
  src=&quot;https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-MML-AM_CHTML&quot;&gt;
&lt;/script&gt;
    
    </summary>
    
      <category term="approximation" scheme="http://jinshendan.github.io/categories/approximation/"/>
    
    
      <category term="approximation" scheme="http://jinshendan.github.io/tags/approximation/"/>
    
      <category term="dp" scheme="http://jinshendan.github.io/tags/dp/"/>
    
      <category term="rounding" scheme="http://jinshendan.github.io/tags/rounding/"/>
    
  </entry>
  
  <entry>
    <title>generator - Regionals 2015 Asia-Hangzhou</title>
    <link href="http://jinshendan.github.io/generator.html"/>
    <id>http://jinshendan.github.io/generator.html</id>
    <published>2017-04-18T20:00:12.000Z</published>
    <updated>2017-04-18T20:10:03.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><p>We generate a random string by generating a sequence of random characters and concatenating them together. Each character is chosen independently from the first n letters in the English alphabet with equal probability. Only capital letters are used in this problem. The generation is stopped as soon as a specific pattern occurs in the random string. Your task is to predict the expected length of the generated string.</p>
<h2 id="Limits"><a href="#Limits" class="headerlink" title="Limits"></a>Limits</h2><ul>
<li>1 &lt;= T &lt;= 10.</li>
<li>1 &lt;= n &lt;= 26.</li>
<li>The length of any pattern will not exceed 12.</li>
</ul>
<a id="more"></a>
<h2 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h2><ul>
<li>For any string S, define the function state(S) as the maximal length of the prefix of pattern which is also a suffix of the current string at the same time.</li>
<li>If the pattern has length L, then the state of any string is a number between 0 and L. </li>
<li>We know that L is a final state. </li>
<li>Let’s define f[i] as the expected number of steps from state i to state L. </li>
<li>Then we have f[i] = 1+ 1/n(f[a(1,1)]+f[a(1,2)]+…+f[a(1,n)]), where a(i,j) is the state of the new string after concatenating the current string and the j-th letter together. </li>
<li>Thus, the answer is f[0].</li>
</ul>
<h2 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a>Notes</h2><ul>
<li>We can use brute-force to compute a(i,j).</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;Problem&lt;/h2&gt;&lt;p&gt;We generate a random string by generating a sequence of random characters and concatenating them together. Each character is chosen independently from the first n letters in the English alphabet with equal probability. Only capital letters are used in this problem. The generation is stopped as soon as a specific pattern occurs in the random string. Your task is to predict the expected length of the generated string.&lt;/p&gt;
&lt;h2 id=&quot;Limits&quot;&gt;&lt;a href=&quot;#Limits&quot; class=&quot;headerlink&quot; title=&quot;Limits&quot;&gt;&lt;/a&gt;Limits&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;1 &amp;lt;= T &amp;lt;= 10.&lt;/li&gt;
&lt;li&gt;1 &amp;lt;= n &amp;lt;= 26.&lt;/li&gt;
&lt;li&gt;The length of any pattern will not exceed 12.&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="LA" scheme="http://jinshendan.github.io/categories/LA/"/>
    
    
      <category term="Probability" scheme="http://jinshendan.github.io/tags/Probability/"/>
    
      <category term="DP" scheme="http://jinshendan.github.io/tags/DP/"/>
    
  </entry>
  
  <entry>
    <title>Coupons - UVA 10288</title>
    <link href="http://jinshendan.github.io/Coupons.html"/>
    <id>http://jinshendan.github.io/Coupons.html</id>
    <published>2017-04-18T19:50:10.000Z</published>
    <updated>2017-04-18T20:10:19.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><p>There are n coupons numbered from 1 to n. How many times on average are required to make a complete set of n coupons<br>by selecting one coupon each time? </p>
<p>If the answer is an integer number, output the number. If the answer is not integer, then output the integer part of the answer followed by a space and then by the proper fraction in the format Num/Denom. The fractional part should be irreducible.</p>
<h2 id="Limits"><a href="#Limits" class="headerlink" title="Limits"></a>Limits</h2><ul>
<li>1 &lt;= n &lt;= 33</li>
</ul>
<a id="more"></a>
<h2 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h2><ul>
<li>Assume that we have already k different coupons.</li>
<li>Then the probability of getting a new different coupon is (n-k)/n. The expected cost is n/(n-k). </li>
<li>Thus the expected number of times to make a complete set of n coupons is n/n+n/(n-1)+…+n/1 = n(1/1+1/2+1/3+…+1/n).</li>
</ul>
<h2 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a>Notes</h2><ul>
<li>Make the fractional part irreducible after each addition to avoid any over 64 bits integers.</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;Problem&lt;/h2&gt;&lt;p&gt;There are n coupons numbered from 1 to n. How many times on average are required to make a complete set of n coupons&lt;br&gt;by selecting one coupon each time? &lt;/p&gt;
&lt;p&gt;If the answer is an integer number, output the number. If the answer is not integer, then output the integer part of the answer followed by a space and then by the proper fraction in the format Num/Denom. The fractional part should be irreducible.&lt;/p&gt;
&lt;h2 id=&quot;Limits&quot;&gt;&lt;a href=&quot;#Limits&quot; class=&quot;headerlink&quot; title=&quot;Limits&quot;&gt;&lt;/a&gt;Limits&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;1 &amp;lt;= n &amp;lt;= 33&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="UVA" scheme="http://jinshendan.github.io/categories/UVA/"/>
    
    
      <category term="Probability" scheme="http://jinshendan.github.io/tags/Probability/"/>
    
      <category term="Fraction" scheme="http://jinshendan.github.io/tags/Fraction/"/>
    
  </entry>
  
  <entry>
    <title>Learning C++ (1)</title>
    <link href="http://jinshendan.github.io/Learning-C.html"/>
    <id>http://jinshendan.github.io/Learning-C.html</id>
    <published>2017-02-26T13:21:15.000Z</published>
    <updated>2017-03-01T23:19:35.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Simple-Variables"><a href="#Simple-Variables" class="headerlink" title="Simple Variables"></a>Simple Variables</h2><hr>
<h3 id="Byte-and-bit"><a href="#Byte-and-bit" class="headerlink" title="Byte and bit"></a>Byte and bit</h3><ul>
<li>Usually, 1 byte = 8 bits. </li>
<li>In C++, 1 byte = number of bits per char.</li>
<li>Using the library “climits” to determine the limit. </li>
</ul>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">"int is "</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="keyword">int</span>) &lt;&lt; <span class="string">" bytes."</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">"short is "</span> &lt;&lt; <span class="keyword">sizeof</span> (SHRT_MAX) &lt;&lt; <span class="string">" bytes"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">"long is "</span> &lt;&lt; <span class="keyword">sizeof</span> (LONG_MAX) &lt;&lt; <span class="string">" bytes"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">"long long is "</span> &lt;&lt; <span class="keyword">sizeof</span>(LLONG_MAX) &lt;&lt; <span class="string">" bytes"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">"Bits per byte = "</span> &lt;&lt; CHAR_BIT &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">"Maximum int values: "</span> &lt;&lt; INT_MAX &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">"Minimum int values: "</span> &lt;&lt; INT_MIN &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h3 id="Using-to-initilize-the-varaibles"><a href="#Using-to-initilize-the-varaibles" class="headerlink" title="Using {} to initilize the varaibles."></a>Using {} to initilize the varaibles.</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">- <span class="keyword">int</span> x&#123;<span class="number">7</span>&#125;;	<span class="comment">//Set x to 7.</span></div><div class="line">- <span class="keyword">int</span> y = &#123;<span class="number">1</span>&#125;	<span class="comment">//Set y to 1.</span></div><div class="line">- <span class="keyword">int</span> z = &#123;&#125;; 	<span class="comment">//Set z to 0.</span></div></pre></td></tr></table></figure>
<hr>
<h3 id="Hex-and-Octal-literals"><a href="#Hex-and-Octal-literals" class="headerlink" title="Hex and Octal literals"></a>Hex and Octal literals</h3><ul>
<li>An integer in C++ also has Hex and Octal representations.</li>
<li>C++ uses the first two bits to identify the base.</li>
<li>In decimal, the first bit is 1-9.</li>
<li>In octal, the first bit is 0 and the second bit is 1-7.</li>
<li><p>In hex, the first two bits are 0X or 0x. </p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="keyword">int</span> x = <span class="number">32</span>;</div><div class="line">	<span class="keyword">int</span> y = <span class="number">0x32</span>;</div><div class="line">	<span class="keyword">int</span> z = <span class="number">032</span>;</div><div class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">"x = "</span> &lt;&lt; x &lt;&lt; <span class="string">" in decimal"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">"y = "</span> &lt;&lt; y &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">"z = "</span> &lt;&lt; z &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>By default, cout prints the number in decimal.</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cout</span> &lt;&lt; hex;</div><div class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"y = "</span> &lt;&lt; y &lt;&lt; <span class="string">" in hex"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line"><span class="built_in">cout</span> &lt;&lt; oct;</div><div class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"z = "</span> &lt;&lt; z &lt;&lt; <span class="string">" in oct"</span> &lt;&lt; <span class="built_in">endl</span>;</div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><hr>
<h3 id="C-style-string"><a href="#C-style-string" class="headerlink" title="C-style string"></a>C-style string</h3><ul>
<li>Library “cstring”, strlen(), …</li>
<li>‘\0’ at the end of the string</li>
</ul>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="keyword">char</span> tab[<span class="number">20</span>];</div><div class="line">	<span class="built_in">cin</span> &gt;&gt; tab;	<span class="comment">//Input "Alain Turing"</span></div><div class="line">	<span class="built_in">cout</span> &lt;&lt; tab &lt;&lt; <span class="built_in">endl</span>; <span class="comment">//Output: Alain</span></div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>We get only one word here, not the entire string</li>
</ul>
<hr>
<h3 id="cin-getline-and-cin-get"><a href="#cin-getline-and-cin-get" class="headerlink" title="cin.getline() and cin.get()"></a>cin.getline() and cin.get()</h3><ul>
<li>getline() drops the ‘\n’ in the input stream, get() keeps the ‘\n’.</li>
</ul>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="keyword">char</span> tab[<span class="number">20</span>];</div><div class="line">	<span class="built_in">cin</span>.getline(tab, <span class="number">6</span>);  <span class="comment">// Input: "Cat Dog"</span></div><div class="line">	<span class="built_in">cout</span> &lt;&lt; tab &lt;&lt; <span class="built_in">endl</span>;	<span class="comment">//Output: "Cat D"</span></div><div class="line">	<span class="built_in">cin</span>.clear();	<span class="comment">// Clear the failbit</span></div><div class="line">	<span class="built_in">cin</span>.getline(tab, <span class="number">20</span>);	<span class="comment">//Input: "og"</span></div><div class="line">	<span class="built_in">cout</span> &lt;&lt; tab &lt;&lt; <span class="built_in">endl</span>;	<span class="comment">//Output: "og"</span></div><div class="line"></div><div class="line"></div><div class="line">	<span class="built_in">cin</span>.get(tab, <span class="keyword">sizeof</span>(tab), <span class="string">'o'</span>); <span class="comment">//Input: "I'm good"</span></div><div class="line">	<span class="built_in">cout</span> &lt;&lt; tab &lt;&lt; <span class="built_in">endl</span>;	<span class="comment">//Output: "I'm g"</span></div><div class="line">	<span class="built_in">cin</span>.get(tab, <span class="keyword">sizeof</span>(tab)).get(); <span class="comment">//Input: "ood"</span></div><div class="line">	<span class="built_in">cout</span> &lt;&lt; tab &lt;&lt; <span class="built_in">endl</span>;	<span class="comment">//Output: "ood"</span></div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>Do not forget to use a cin.clear() after using a cin.getline() and cin.get(), because there may be a failbit when the input stream is bigger than the need.</li>
<li>cin.get(): get a char, we can use it to ignore the ‘\n’.</li>
</ul>
<hr>
<h3 id="String-class"><a href="#String-class" class="headerlink" title="String class"></a>String class</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="built_in">string</span> str;</div><div class="line">	getline(<span class="built_in">cin</span>, str); <span class="comment">//Read a line.</span></div><div class="line">	<span class="built_in">cout</span> &lt;&lt; str &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Simple-Variables&quot;&gt;&lt;a href=&quot;#Simple-Variables&quot; class=&quot;headerlink&quot; title=&quot;Simple Variables&quot;&gt;&lt;/a&gt;Simple Variables&lt;/h2&gt;&lt;hr&gt;
&lt;h3 id=&quot;Byte
    
    </summary>
    
      <category term="C++" scheme="http://jinshendan.github.io/categories/C/"/>
    
    
      <category term="C++" scheme="http://jinshendan.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>ProgSys(1) -- Process and Fork</title>
    <link href="http://jinshendan.github.io/progsys-fork.html"/>
    <id>http://jinshendan.github.io/progsys-fork.html</id>
    <published>2016-11-18T16:01:51.000Z</published>
    <updated>2016-11-20T13:46:49.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Process"><a href="#Process" class="headerlink" title="Process"></a>Process</h2><hr>
<h3 id="Process-program-in-execution"><a href="#Process-program-in-execution" class="headerlink" title="Process = program in execution"></a>Process = program in execution</h3><ul>
<li>One or more threads.</li>
<li>Can communicate through pipes, signals, networks, files.</li>
</ul>
<hr>
<h3 id="Process-descriptor"><a href="#Process-descriptor" class="headerlink" title="Process descriptor"></a>Process descriptor</h3><ul>
<li>Each process has its Process Descriptor, which is used to keep track of the process in memory</li>
<li>Stores PID, state, parent process, children, registers, address space information, open files</li>
<li>Process information is usually stored in the so called Process Table, i.e. an array of PD</li>
</ul>
<hr>
<h3 id="Three-states-model"><a href="#Three-states-model" class="headerlink" title="Three states model"></a>Three states model</h3><ul>
<li>Running : execution, process is using the CPU.</li>
<li>Ready : process can be executed but is temporarily waiting, CPU is used by another process.</li>
<li>Waiting : process can’t be executed; it is either blocked because waiting for an external event (e.g. I/O, interrupt from another process) or because scheduler assigned CPU to others.</li>
</ul>
<hr>
<h3 id="Code-in-C"><a href="#Code-in-C" class="headerlink" title="Code in C"></a>Code in C</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></div><div class="line"><span class="keyword">gid_t</span> getgid (<span class="keyword">void</span>);</div><div class="line"><span class="keyword">pid_t</span> getpid (<span class="keyword">void</span>);</div><div class="line"><span class="keyword">pid_t</span> getppid (<span class="keyword">void</span>);</div><div class="line"><span class="keyword">uid_t</span> getuid (<span class="keyword">void</span>);</div></pre></td></tr></table></figure>
<ul>
<li>getpid(): returns the process ID of the calling process.</li>
<li>getppid() : returns the process ID of the parent of the calling process.</li>
<li>getgid() : returns the group ID of the calling process</li>
<li>getuid() : returns the user ID of the calling process</li>
</ul>
<hr>
<h3 id="Creat"><a href="#Creat" class="headerlink" title="Creat"></a>Creat</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">pid_t</span> p = fork();</div></pre></td></tr></table></figure>
<p>Remarks:</p>
<ul>
<li>p == 0 (Child process)</li>
<li>p == -1 (Error)</li>
<li>p &gt; 0 (Parent process)</li>
</ul>
<h3 id="Get-ID"><a href="#Get-ID" class="headerlink" title="Get ID"></a>Get ID</h3><hr>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> my_PID = getpid();</div><div class="line"><span class="keyword">int</span> my_parent_PID = getppid();</div><div class="line"><span class="keyword">int</span> my_UID = getuid();</div><div class="line"><span class="keyword">int</span> my_GID = getgid();</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Process&quot;&gt;&lt;a href=&quot;#Process&quot; class=&quot;headerlink&quot; title=&quot;Process&quot;&gt;&lt;/a&gt;Process&lt;/h2&gt;&lt;hr&gt;
&lt;h3 id=&quot;Process-program-in-execution&quot;&gt;&lt;a href=&quot;#
    
    </summary>
    
      <category term="ProgSys" scheme="http://jinshendan.github.io/categories/ProgSys/"/>
    
    
      <category term="Process" scheme="http://jinshendan.github.io/tags/Process/"/>
    
      <category term="Fork" scheme="http://jinshendan.github.io/tags/Fork/"/>
    
  </entry>
  
  <entry>
    <title>Text Document Analysis - CodeForce - 723B</title>
    <link href="http://jinshendan.github.io/Text-Document-Analysis-CF-723B.html"/>
    <id>http://jinshendan.github.io/Text-Document-Analysis-CF-723B.html</id>
    <published>2016-10-28T13:45:03.000Z</published>
    <updated>2016-10-28T13:47:54.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><p><a href="http://codeforces.com/problemset/problem/723/B" target="_blank" rel="external">Here</a>.</p>
<h3 id="Code-in-C"><a href="#Code-in-C" class="headerlink" title="Code in C++"></a>Code in C++</h3><a id="more"></a>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="keyword">int</span> n;</div><div class="line">	<span class="built_in">cin</span> &gt;&gt; n;</div><div class="line">	<span class="keyword">int</span> p = <span class="number">0</span>;</div><div class="line">	<span class="keyword">char</span> s;</div><div class="line">	<span class="keyword">int</span> num_words_in = <span class="number">0</span>;</div><div class="line">	<span class="keyword">int</span> max_length_out = <span class="number">0</span>;</div><div class="line">	<span class="keyword">int</span> length = <span class="number">0</span>;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</div><div class="line">		<span class="built_in">cin</span> &gt;&gt; s;</div><div class="line">		<span class="keyword">if</span> (s == <span class="string">'_'</span> || s == <span class="string">'('</span> || s == <span class="string">')'</span>) &#123;</div><div class="line">			<span class="keyword">if</span> (p &amp;&amp; length) &#123;  num_words_in ++; &#125;</div><div class="line">			<span class="keyword">else</span> max_length_out = max(max_length_out, length);</div><div class="line">			length = <span class="number">0</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (s == <span class="string">'('</span>) </div><div class="line">			p = <span class="number">1</span>;</div><div class="line">		<span class="keyword">if</span> (s == <span class="string">')'</span>)</div><div class="line">			p = <span class="number">0</span>;</div><div class="line">		<span class="keyword">if</span> ((<span class="string">'a'</span> &lt;= s &amp;&amp; s &lt;= <span class="string">'z'</span>) || (<span class="string">'A'</span> &lt;= s &amp;&amp; s &lt;= <span class="string">'Z'</span>))</div><div class="line">			length ++;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">//cout &lt;&lt; max_length_out &lt;&lt; endl;</span></div><div class="line">	max_length_out = max(max_length_out, length);</div><div class="line"></div><div class="line">	<span class="built_in">cout</span> &lt;&lt; max_length_out &lt;&lt; <span class="string">" "</span> &lt;&lt; num_words_in &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;Problem&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://codeforces.com/problemset/problem/723/B&quot;&gt;Here&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;Code-in-C&quot;&gt;&lt;a href=&quot;#Code-in-C&quot; class=&quot;headerlink&quot; title=&quot;Code in C++&quot;&gt;&lt;/a&gt;Code in C++&lt;/h3&gt;
    
    </summary>
    
      <category term="CodeForce" scheme="http://jinshendan.github.io/categories/CodeForce/"/>
    
    
      <category term="Implementation" scheme="http://jinshendan.github.io/tags/Implementation/"/>
    
      <category term="Expression parsing" scheme="http://jinshendan.github.io/tags/Expression-parsing/"/>
    
  </entry>
  
  <entry>
    <title>The New Year Meeting Friends - Codeforce 723A</title>
    <link href="http://jinshendan.github.io/The-New-Year-Meeting-Friends-CF-723A.html"/>
    <id>http://jinshendan.github.io/The-New-Year-Meeting-Friends-CF-723A.html</id>
    <published>2016-10-28T13:35:27.000Z</published>
    <updated>2016-10-28T13:39:15.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><p><a href="http://codeforces.com/problemset/problem/723/A" target="_blank" rel="external">Here</a>.</p>
<h2 id="Code-in-C"><a href="#Code-in-C" class="headerlink" title="Code in C++"></a>Code in C++</h2><a id="more"></a>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="keyword">int</span> a, b, c;</div><div class="line">	<span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b &gt;&gt; c;</div><div class="line">	<span class="built_in">cout</span> &lt;&lt; max(max(a, b), c) - min(min(a, b), c) &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;Problem&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://codeforces.com/problemset/problem/723/A&quot;&gt;Here&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Code-in-C&quot;&gt;&lt;a href=&quot;#Code-in-C&quot; class=&quot;headerlink&quot; title=&quot;Code in C++&quot;&gt;&lt;/a&gt;Code in C++&lt;/h2&gt;
    
    </summary>
    
      <category term="CodeForce" scheme="http://jinshendan.github.io/categories/CodeForce/"/>
    
    
      <category term="Sort" scheme="http://jinshendan.github.io/tags/Sort/"/>
    
  </entry>
  
  <entry>
    <title>Transformation from A to B - Codeforce 727A</title>
    <link href="http://jinshendan.github.io/Transformation-from-A-to-B-CF-727A.html"/>
    <id>http://jinshendan.github.io/Transformation-from-A-to-B-CF-727A.html</id>
    <published>2016-10-28T13:25:41.000Z</published>
    <updated>2016-10-28T13:42:44.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><p><a href="http://codeforces.com/problemset/problem/727/A" target="_blank" rel="external">Here</a>.</p>
<h2 id="Code-in-C"><a href="#Code-in-C" class="headerlink" title="Code in C++"></a>Code in C++</h2><a id="more"></a>
<pre><code class="C++"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span>
<span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span>
<span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;

<span class="keyword">int</span> a, b;
<span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{
    <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;
    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v;
    <span class="keyword">int</span> ok = <span class="number">1</span>;
    <span class="keyword">while</span> (b &gt; a) {
        <span class="comment">//cout &lt;&lt; b &lt;&lt; endl;</span>
        v.push_back(b);
        <span class="keyword">if</span> ((b &amp; <span class="number">1</span>) == <span class="number">0</span>) {
            b = b / <span class="number">2</span>;
        }
        <span class="keyword">else</span> <span class="keyword">if</span> (b % <span class="number">10</span> == <span class="number">1</span>) {
            b = b / <span class="number">10</span>;
        }
        <span class="keyword">else</span> { ok = <span class="number">0</span>; <span class="keyword">break</span>;}
    }

    <span class="keyword">if</span> (b != a) ok = <span class="number">0</span>; 
    <span class="keyword">else</span> v.push_back(a);


    <span class="keyword">if</span> (!ok) <span class="built_in">cout</span> &lt;&lt; <span class="string">"NO"</span> &lt;&lt; <span class="built_in">endl</span>;
    <span class="keyword">else</span> {
        <span class="built_in">cout</span> &lt;&lt; <span class="string">"YES"</span> &lt;&lt; <span class="built_in">endl</span>;
        <span class="built_in">cout</span> &lt;&lt; v.size() &lt;&lt; <span class="built_in">endl</span>;
        <span class="keyword">for</span> (<span class="keyword">int</span> i = v.size()<span class="number">-1</span>; i &gt;<span class="number">0</span>; i--)
            <span class="built_in">cout</span> &lt;&lt; v[i] &lt;&lt; <span class="string">" "</span>;
        <span class="built_in">cout</span> &lt;&lt; v[<span class="number">0</span>] &lt;&lt; <span class="built_in">endl</span>;
    }
    <span class="keyword">return</span> <span class="number">0</span>;
}
</code></pre>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;Problem&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://codeforces.com/problemset/problem/727/A&quot;&gt;Here&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Code-in-C&quot;&gt;&lt;a href=&quot;#Code-in-C&quot; class=&quot;headerlink&quot; title=&quot;Code in C++&quot;&gt;&lt;/a&gt;Code in C++&lt;/h2&gt;
    
    </summary>
    
      <category term="CodeForce" scheme="http://jinshendan.github.io/categories/CodeForce/"/>
    
    
      <category term="dfs" scheme="http://jinshendan.github.io/tags/dfs/"/>
    
  </entry>
  
  <entry>
    <title>Bill Total Value - Codeforce 727B</title>
    <link href="http://jinshendan.github.io/Bill-Total-Value-CF-727B.html"/>
    <id>http://jinshendan.github.io/Bill-Total-Value-CF-727B.html</id>
    <published>2016-10-28T13:18:47.000Z</published>
    <updated>2016-10-28T13:21:48.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><p><a href="http://codeforces.com/problemset/problem/727/B" target="_blank" rel="external">Here</a>.</p>
<h2 id="Code-in-C"><a href="#Code-in-C" class="headerlink" title="Code in C++"></a>Code in C++</h2><a id="more"></a>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">double</span> epsilon = <span class="number">0.00001</span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> (x == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">	<span class="keyword">int</span> n = <span class="number">0</span>;</div><div class="line">	<span class="keyword">while</span> (x &gt; <span class="number">0</span>) &#123;</div><div class="line">		n ++;</div><div class="line">		x = x / <span class="number">10</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> n;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v;</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; w;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">double</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> (v.size() == <span class="number">1</span>)</div><div class="line">		<span class="keyword">return</span> v[<span class="number">0</span>];</div><div class="line">	<span class="keyword">double</span> tmp = <span class="number">0.0</span>;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; v.size()<span class="number">-1</span>; i++)</div><div class="line">		tmp = tmp*<span class="number">1000</span> + v[i];</div><div class="line">	<span class="comment">//cout &lt;&lt; tmp &lt;&lt; endl;</span></div><div class="line">	<span class="comment">//cout &lt;&lt; v[v.size()-1] &lt;&lt; endl;</span></div><div class="line">	<span class="comment">//cout &lt;&lt; f(32) &lt;&lt; endl;</span></div><div class="line">	<span class="comment">//cout &lt;&lt; w[v.size()-1] &lt;&lt; endl;</span></div><div class="line">	<span class="keyword">if</span> (w[v.size()<span class="number">-1</span>] &lt;= <span class="number">2</span>) &#123;</div><div class="line">		<span class="comment">//cout &lt;&lt; "----&gt; " &lt;&lt; v[v.size()-1] &lt;&lt; endl;</span></div><div class="line">		tmp += <span class="number">0.01</span> * v[v.size()<span class="number">-1</span>];</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">else</span> tmp = tmp * <span class="number">1000</span> + v[v.size()<span class="number">-1</span>];</div><div class="line"></div><div class="line">	<span class="comment">//cout &lt;&lt; "return " &lt;&lt; tmp &lt;&lt; endl;</span></div><div class="line">	<span class="keyword">return</span> tmp;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">out</span><span class="params">(<span class="keyword">double</span> sum)</span> </span>&#123;</div><div class="line">	<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v;</div><div class="line">	<span class="keyword">int</span> zhengshu = (<span class="keyword">int</span>)sum;</div><div class="line">	<span class="comment">//cout &lt;&lt; (sum-zhengshu)*100 + epsilon &lt;&lt; endl;</span></div><div class="line">	<span class="keyword">int</span> xiaoshu = ((sum - zhengshu)*<span class="number">100</span>) + epsilon;</div><div class="line">	<span class="comment">//cout &lt;&lt; "xs : " &lt;&lt; xiaoshu &lt;&lt; endl;</span></div><div class="line">	<span class="comment">//cout &lt;&lt; zhengshu &lt;&lt; endl;</span></div><div class="line">	<span class="keyword">if</span> (zhengshu == <span class="number">0</span>)</div><div class="line">		v.push_back(<span class="number">0</span>);</div><div class="line">	<span class="keyword">while</span> (zhengshu &gt; <span class="number">0</span>)&#123;</div><div class="line">		v.push_back(zhengshu % <span class="number">1000</span>);</div><div class="line">		zhengshu = zhengshu / <span class="number">1000</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="built_in">cout</span> &lt;&lt; v[v.size()<span class="number">-1</span>];</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = v.size()<span class="number">-2</span>; i &gt;=<span class="number">0</span>; i--)&#123;</div><div class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"."</span>;</div><div class="line">		<span class="keyword">if</span> (f(v[i]) == <span class="number">1</span>) <span class="built_in">cout</span> &lt;&lt; <span class="string">"00"</span>;</div><div class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (f(v[i]) == <span class="number">2</span>) <span class="built_in">cout</span> &lt;&lt; <span class="string">"0"</span>;</div><div class="line"></div><div class="line">		<span class="built_in">cout</span> &lt;&lt; v[i];</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (xiaoshu == <span class="number">0</span>)</div><div class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">	<span class="keyword">else</span> &#123;</div><div class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">'.'</span>; </div><div class="line">		<span class="keyword">if</span> (f(xiaoshu) == <span class="number">1</span>) <span class="built_in">cout</span> &lt;&lt; <span class="string">'0'</span>;</div><div class="line">		<span class="built_in">cout</span> &lt;&lt; xiaoshu &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="built_in">string</span> s;</div><div class="line">	<span class="built_in">cin</span> &gt;&gt; s;</div><div class="line">	<span class="keyword">int</span> len = s.length();</div><div class="line">	<span class="keyword">int</span> num = <span class="number">0</span>;</div><div class="line">	<span class="keyword">double</span> sum = <span class="number">0.00</span>;</div><div class="line">	<span class="keyword">int</span> len_num = <span class="number">0</span>;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (<span class="string">'0'</span> &lt;= s[i] &amp;&amp; s[i] &lt;= <span class="string">'9'</span>) &#123;</div><div class="line">			num = num * <span class="number">10</span> + (s[i]-<span class="string">'0'</span>);</div><div class="line">			len_num++;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (s[i] == <span class="string">'.'</span>) &#123;</div><div class="line">			v.push_back(num);</div><div class="line">			w.push_back(len_num);</div><div class="line">			num = <span class="number">0</span>;  len_num = <span class="number">0</span>;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (<span class="string">'a'</span> &lt;= s[i] &amp;&amp; s[i] &lt;= <span class="string">'z'</span>) &#123;</div><div class="line">			v.push_back(num);</div><div class="line">			w.push_back(len_num);</div><div class="line">			sum += solve();</div><div class="line">			num = <span class="number">0</span>; len_num = <span class="number">0</span>;</div><div class="line">			v.clear(); w.clear();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line"></div><div class="line">	v.push_back(num);</div><div class="line">	w.push_back(len_num);</div><div class="line">	sum += solve();</div><div class="line">	out(sum);</div><div class="line">	<span class="comment">//printf("%.2f\n", sum);</span></div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;Problem&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://codeforces.com/problemset/problem/727/B&quot;&gt;Here&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Code-in-C&quot;&gt;&lt;a href=&quot;#Code-in-C&quot; class=&quot;headerlink&quot; title=&quot;Code in C++&quot;&gt;&lt;/a&gt;Code in C++&lt;/h2&gt;
    
    </summary>
    
      <category term="CodeForce" scheme="http://jinshendan.github.io/categories/CodeForce/"/>
    
    
      <category term="String" scheme="http://jinshendan.github.io/tags/String/"/>
    
      <category term="Implementation" scheme="http://jinshendan.github.io/tags/Implementation/"/>
    
  </entry>
  
  <entry>
    <title>Cormen The Best Friend Of a Man - Codeforce 732B</title>
    <link href="http://jinshendan.github.io/Cormen-CF-732B.html"/>
    <id>http://jinshendan.github.io/Cormen-CF-732B.html</id>
    <published>2016-10-28T13:06:21.000Z</published>
    <updated>2016-10-28T13:23:31.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><p><a href="http://codeforces.com/problemset/problem/732/B" target="_blank" rel="external">Here</a>.</p>
<h2 id="Code-in-C"><a href="#Code-in-C" class="headerlink" title="Code in C++"></a>Code in C++</h2><a id="more"></a>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">505</span>;</div><div class="line"><span class="keyword">int</span> a[maxn];</div><div class="line"><span class="keyword">int</span> tot;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="keyword">int</span> n, m;</div><div class="line">	<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; n; i++) </div><div class="line">		<span class="built_in">cin</span> &gt;&gt; a[i];</div><div class="line"></div><div class="line">	tot = <span class="number">0</span>;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++)</div><div class="line">		<span class="keyword">if</span> (a[i<span class="number">-1</span>] + a[i] &lt; m) &#123;</div><div class="line">			tot += m - a[i] - a[i<span class="number">-1</span>];</div><div class="line">			a[i] = m - a[i<span class="number">-1</span>];</div><div class="line">		&#125;</div><div class="line">	</div><div class="line">	<span class="built_in">cout</span> &lt;&lt; tot &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n<span class="number">-1</span>; i++)</div><div class="line">		<span class="built_in">cout</span> &lt;&lt; a[i] &lt;&lt; <span class="string">" "</span>;</div><div class="line">	<span class="built_in">cout</span> &lt;&lt; a[n<span class="number">-1</span>] &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;Problem&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://codeforces.com/problemset/problem/732/B&quot;&gt;Here&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Code-in-C&quot;&gt;&lt;a href=&quot;#Code-in-C&quot; class=&quot;headerlink&quot; title=&quot;Code in C++&quot;&gt;&lt;/a&gt;Code in C++&lt;/h2&gt;
    
    </summary>
    
      <category term="CodeForce" scheme="http://jinshendan.github.io/categories/CodeForce/"/>
    
    
      <category term="Greedy" scheme="http://jinshendan.github.io/tags/Greedy/"/>
    
  </entry>
  
  <entry>
    <title>Sockets - Codeforce 732E</title>
    <link href="http://jinshendan.github.io/CF-732E-Sockets.html"/>
    <id>http://jinshendan.github.io/CF-732E-Sockets.html</id>
    <published>2016-10-28T12:57:40.000Z</published>
    <updated>2016-10-28T13:21:57.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><p><a href="http://codeforces.com/problemset/problem/732/E" target="_blank" rel="external">Here</a>.</p>
<h2 id="Code-in-C"><a href="#Code-in-C" class="headerlink" title="Code in C++"></a>Code in C++</h2><a id="more"></a>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">200000</span> + <span class="number">5</span>;</div><div class="line"><span class="keyword">struct</span> Node &#123;</div><div class="line">	<span class="keyword">int</span> v, id, num;</div><div class="line">	Node(<span class="keyword">int</span> v, <span class="keyword">int</span> id, <span class="keyword">int</span> num): v(v), id(id), num(num) &#123;&#125;</div><div class="line"></div><div class="line">	<span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(<span class="keyword">const</span> Node &amp;t) <span class="keyword">const</span> &#123;</div><div class="line">		<span class="keyword">return</span> (v &lt; t.v) || (v == t.v &amp;&amp; num &gt; t.num);</div><div class="line">	&#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"><span class="keyword">int</span> ans[maxn], ans2[maxn];</div><div class="line"><span class="keyword">int</span> total_socket, total_computer;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">	priority_queue&lt;Node&gt; que;</div><div class="line">	<span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; mp;</div><div class="line">	<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m);</div><div class="line">	<span class="keyword">int</span> x;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;=n; i++) &#123;</div><div class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</div><div class="line">		mp[x].push_back(i);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</div><div class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</div><div class="line">		que.push(Node(x, i, <span class="number">0</span>));</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">//memset(ans2, 0, sizeof(ans2));</span></div><div class="line"></div><div class="line">	total_socket = total_computer = <span class="number">0</span>;</div><div class="line">	<span class="comment">//int max_now;</span></div><div class="line">	<span class="keyword">while</span>(!que.empty())&#123;</div><div class="line">		Node tmp = que.top(); que.pop();</div><div class="line">		<span class="keyword">if</span> (mp.find(tmp.v) != mp.end() &amp;&amp; mp[tmp.v].size()) &#123;</div><div class="line">			ans[tmp.id] = tmp.num;</div><div class="line">			ans2[mp[tmp.v][mp[tmp.v].size()<span class="number">-1</span>]] = tmp.id;</div><div class="line">			total_socket += tmp.num;</div><div class="line">			total_computer ++;</div><div class="line">			mp[tmp.v].pop_back();</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span> &#123;</div><div class="line">			<span class="keyword">if</span> (tmp.v &gt; <span class="number">1</span>) &#123;</div><div class="line">				que.push(Node(tmp.v - tmp.v/<span class="number">2</span>, tmp.id, tmp.num+<span class="number">1</span>));</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, total_computer, total_socket);</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; m; i++)</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"%d "</span>, ans[i]);</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans[m]);</div><div class="line"></div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++)</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"%d "</span>, ans2[i]);</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans2[n]);</div><div class="line"> 	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;Problem&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://codeforces.com/problemset/problem/732/E&quot;&gt;Here&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Code-in-C&quot;&gt;&lt;a href=&quot;#Code-in-C&quot; class=&quot;headerlink&quot; title=&quot;Code in C++&quot;&gt;&lt;/a&gt;Code in C++&lt;/h2&gt;
    
    </summary>
    
      <category term="CodeForce" scheme="http://jinshendan.github.io/categories/CodeForce/"/>
    
    
      <category term="Greedy" scheme="http://jinshendan.github.io/tags/Greedy/"/>
    
  </entry>
  
  <entry>
    <title>Two Sum - Leetcode A1</title>
    <link href="http://jinshendan.github.io/Two-Sum.html"/>
    <id>http://jinshendan.github.io/Two-Sum.html</id>
    <published>2016-09-19T08:59:47.000Z</published>
    <updated>2016-09-19T09:23:11.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><p><a href="https://leetcode.com/problems/two-sum/" target="_blank" rel="external">Here</a>.</p>
<h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>Given an array of integers, return indices of the two numbers such that they add up to a specific target.</p>
<p>You may assume that each input would have exactly one solution.</p>
<p>The return format had been changed to zero-based indices.<br><a id="more"></a></p>
<h2 id="Analyse"><a href="#Analyse" class="headerlink" title="Analyse"></a>Analyse</h2><h3 id="Be-careful"><a href="#Be-careful" class="headerlink" title="Be careful"></a>Be careful</h3><ul>
<li>zero-based indices.</li>
<li>[1, 3, 4, 2].  4 + 2 = 6 is ok. But not for 3 + 3 = 6.</li>
<li>[1, 3, 3, 2].  3 + 3 = 6 is ok.  </li>
</ul>
<h3 id="Brute-force"><a href="#Brute-force" class="headerlink" title="Brute force"></a>Brute force</h3><p>Loop through each element x and find if there is another value equals to target - x.</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; twoSum(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target) &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</div><div class="line"> 		<span class="keyword">int</span> length = nums.size();</div><div class="line"> 		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) </div><div class="line"> 			<span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; length; j++) &#123;</div><div class="line"> 				<span class="keyword">if</span> (nums[i] + nums[j] == target) &#123;</div><div class="line"> 					ans.push_back(i);</div><div class="line"> 					ans.push_back(j);</div><div class="line"> 					<span class="keyword">return</span> ans;</div><div class="line"> 				&#125;</div><div class="line"> 			&#125;</div><div class="line"> 		<span class="keyword">return</span> ans;</div><div class="line">	&#125;;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>Complexity: O(n^2).</p>
<h3 id="Binary-Search"><a href="#Binary-Search" class="headerlink" title="Binary Search"></a>Binary Search</h3><p>One way to improve the brute force is sort the whole array and loop through each element x and find if there is another value equals to target - x by binary search.</p>
<p>Complexity: O(nlogn).</p>
<h3 id="Hash-Map"><a href="#Hash-Map" class="headerlink" title="Hash Map"></a>Hash Map</h3><p>While we iterate and inserting elements into the hash table, we also look back to check if current element’s complement already exists in the table. If it exists, we have found a solution and return immediately.</p>
<p>16 / 16 test cases passed.<br>Status: Accepted<br>Runtime: 26 ms</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; twoSum(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target) &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</div><div class="line">        <span class="keyword">int</span> length = nums.size();</div><div class="line">        <span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;mp;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</div><div class="line">        	<span class="keyword">if</span> (mp[target - nums[i]]) &#123;</div><div class="line">        		ans.push_back(mp[target - nums[i]] - <span class="number">1</span>);</div><div class="line">        		ans.push_back(i);</div><div class="line">        		<span class="keyword">return</span> ans;</div><div class="line">        	&#125;</div><div class="line">        	mp[nums[i]] = i + <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line"> 	   <span class="keyword">return</span> ans;</div><div class="line">	&#125;;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>Complexity: O(n).</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;Problem&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/two-sum/&quot;&gt;Here&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Summary&quot;&gt;&lt;a href=&quot;#Summary&quot; class=&quot;headerlink&quot; title=&quot;Summary&quot;&gt;&lt;/a&gt;Summary&lt;/h2&gt;&lt;p&gt;Given an array of integers, return indices of the two numbers such that they add up to a specific target.&lt;/p&gt;
&lt;p&gt;You may assume that each input would have exactly one solution.&lt;/p&gt;
&lt;p&gt;The return format had been changed to zero-based indices.&lt;br&gt;
    
    </summary>
    
      <category term="Leetcode" scheme="http://jinshendan.github.io/categories/Leetcode/"/>
    
    
      <category term="Binary Search" scheme="http://jinshendan.github.io/tags/Binary-Search/"/>
    
      <category term="Hash Table" scheme="http://jinshendan.github.io/tags/Hash-Table/"/>
    
  </entry>
  
</feed>
