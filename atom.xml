<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Shendan&#39;s blog</title>
  <subtitle>申旦的博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://jinshendan.github.io/"/>
  <updated>2018-03-05T22:20:45.600Z</updated>
  <id>http://jinshendan.github.io/</id>
  
  <author>
    <name>Shendan JIN</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Tensorflow 学习笔记 -- Google Tutorial</title>
    <link href="http://jinshendan.github.io/Learning-Tensorflow.html"/>
    <id>http://jinshendan.github.io/Learning-Tensorflow.html</id>
    <published>2018-03-05T21:51:13.000Z</published>
    <updated>2018-03-05T22:20:45.600Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装Tensorflow"><a href="#安装Tensorflow" class="headerlink" title="安装Tensorflow"></a>安装Tensorflow</h2><p>1). 安装Virtualenv<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ sudo easy_install pip</div><div class="line">$ pip install --upgrade virtualenv</div></pre></td></tr></table></figure></p>
<p>2). 建立virtualenv<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">virtualenv --system-site-packages -p python3 ~/tensorflow</div></pre></td></tr></table></figure></p>
<p>3). 激活virtualenv<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> ~/tensorflow</div><div class="line">$ <span class="built_in">source</span> ./bin/activate</div></pre></td></tr></table></figure></p>
<p>4). 下载tensorflow<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ pip3 install --upgrade tensorflow</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;安装Tensorflow&quot;&gt;&lt;a href=&quot;#安装Tensorflow&quot; class=&quot;headerlink&quot; title=&quot;安装Tensorflow&quot;&gt;&lt;/a&gt;安装Tensorflow&lt;/h2&gt;&lt;p&gt;1). 安装Virtualenv&lt;br&gt;&lt;figure cl
    
    </summary>
    
      <category term="ML" scheme="http://jinshendan.github.io/categories/ML/"/>
    
    
      <category term="Tensorflow" scheme="http://jinshendan.github.io/tags/Tensorflow/"/>
    
  </entry>
  
  <entry>
    <title>Codejam 2017 Qualification Bathroom Stalls</title>
    <link href="http://jinshendan.github.io/Codejam-2017-Qualification-Bathroom-Stalls.html"/>
    <id>http://jinshendan.github.io/Codejam-2017-Qualification-Bathroom-Stalls.html</id>
    <published>2018-03-04T21:53:04.000Z</published>
    <updated>2018-03-04T22:00:06.143Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><p><a href="https://code.google.com/codejam/contest/3264486/dashboard#s=p2&amp;a=2" target="_blank" rel="external">Here</a>.</p>
<a id="more"></a>
<h2 id="Code-in-C"><a href="#Code-in-C" class="headerlink" title="Code in C++"></a>Code in C++</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="keyword">int</span> T;</div><div class="line">	<span class="built_in">cin</span> &gt;&gt; T;</div><div class="line">	FOR(kase, <span class="number">0</span>, T)&#123;</div><div class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"Case #"</span> &lt;&lt; kase + <span class="number">1</span> &lt;&lt; <span class="string">": "</span>;</div><div class="line">		ll n, k;</div><div class="line">		<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k;</div><div class="line">		<span class="built_in">cerr</span> &lt;&lt; kase &lt;&lt; <span class="string">" "</span> &lt;&lt; n &lt;&lt; <span class="string">" "</span> &lt;&lt; k &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">		<span class="built_in">map</span>&lt;ll, ll&gt; s;</div><div class="line">		s[n] = <span class="number">1L</span>L;</div><div class="line"> 		<span class="keyword">while</span>(k &gt; <span class="number">0</span>)&#123;</div><div class="line"> 			<span class="keyword">auto</span> p = *(--s.end());</div><div class="line"> 			s.erase(--s.end());</div><div class="line">			ll len = p.first;</div><div class="line">			ll cnt = p.second;</div><div class="line">			<span class="keyword">if</span> (cnt &gt;= k)&#123;</div><div class="line">				<span class="built_in">cout</span> &lt;&lt; len / <span class="number">2</span> &lt;&lt; <span class="string">" "</span> &lt;&lt; (len - <span class="number">1</span>) / <span class="number">2</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			&#125;</div><div class="line">			k -= cnt;</div><div class="line">			s[len/<span class="number">2</span>] += cnt;</div><div class="line">			s[(len<span class="number">-1</span>)/<span class="number">2</span>] += cnt;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;Problem&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://code.google.com/codejam/contest/3264486/dashboard#s=p2&amp;amp;a=2&quot;&gt;Here&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
      <category term="Codejam" scheme="http://jinshendan.github.io/categories/Codejam/"/>
    
    
      <category term="map" scheme="http://jinshendan.github.io/tags/map/"/>
    
  </entry>
  
  <entry>
    <title>Codejam 2017 Qualification Tidy Numbers</title>
    <link href="http://jinshendan.github.io/Codejam-2017-Qualification-Tidy-Numbers.html"/>
    <id>http://jinshendan.github.io/Codejam-2017-Qualification-Tidy-Numbers.html</id>
    <published>2018-03-04T18:31:32.000Z</published>
    <updated>2018-03-04T18:45:03.602Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><p><a href="https://code.google.com/codejam/contest/3264486/dashboard#s=p1&amp;a=0" target="_blank" rel="external">Here</a>.</p>
<h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p>求不超过N的最大的非递减整数，N 最大不超过 10^18.</p>
<a id="more"></a>
<h2 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h2><ul>
<li>N 长度最大为18，可以贪心枚举每个位置可能放置的数字。</li>
</ul>
<h2 id="Code-in-C"><a href="#Code-in-C" class="headerlink" title="Code in C++"></a>Code in C++</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="keyword">int</span> T;</div><div class="line">	<span class="built_in">cin</span> &gt;&gt; T;</div><div class="line">	<span class="built_in">string</span> s;</div><div class="line">	FOR(kase, <span class="number">0</span>, T)&#123;</div><div class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"Case #"</span> &lt;&lt; kase+<span class="number">1</span> &lt;&lt; <span class="string">": "</span>;</div><div class="line">		<span class="built_in">cin</span> &gt;&gt; s;</div><div class="line">		<span class="built_in">string</span> t;</div><div class="line">		FOR(i, <span class="number">0</span>, s.length())&#123;</div><div class="line">			<span class="keyword">int</span> bound = (i == <span class="number">0</span> ? <span class="number">0</span> : t.back() - <span class="string">'0'</span>);</div><div class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> d = <span class="number">9</span>; d &gt;= bound; d--)&#123;</div><div class="line">				<span class="built_in">string</span> tt = t;</div><div class="line">				FOR(j, i, s.length())</div><div class="line">					tt += (<span class="keyword">char</span>)(<span class="string">'0'</span> + d);</div><div class="line">				<span class="keyword">if</span> (tt &lt;= s)&#123;</div><div class="line">					t += (<span class="keyword">char</span>)(<span class="string">'0'</span> + d);</div><div class="line">					<span class="keyword">break</span>;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">while</span> (t[<span class="number">0</span>] == <span class="string">'0'</span>)&#123;</div><div class="line">			t = t.substr(<span class="number">1</span>);</div><div class="line">		&#125;</div><div class="line">		<span class="built_in">cout</span> &lt;&lt; t &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;Problem&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://code.google.com/codejam/contest/3264486/dashboard#s=p1&amp;amp;a=0&quot;&gt;Here&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;题目大意&quot;&gt;&lt;a href=&quot;#题目大意&quot; class=&quot;headerlink&quot; title=&quot;题目大意&quot;&gt;&lt;/a&gt;题目大意&lt;/h2&gt;&lt;p&gt;求不超过N的最大的非递减整数，N 最大不超过 10^18.&lt;/p&gt;
    
    </summary>
    
      <category term="Codejam" scheme="http://jinshendan.github.io/categories/Codejam/"/>
    
    
      <category term="Brute force" scheme="http://jinshendan.github.io/tags/Brute-force/"/>
    
  </entry>
  
  <entry>
    <title>Codejam 2017 Qualification Oversized Pancake Flipper</title>
    <link href="http://jinshendan.github.io/Codejam-2017-Qualification-Oversized-Pancake-Flipper.html"/>
    <id>http://jinshendan.github.io/Codejam-2017-Qualification-Oversized-Pancake-Flipper.html</id>
    <published>2018-03-04T18:11:36.000Z</published>
    <updated>2018-03-04T18:46:18.706Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><p><a href="https://code.google.com/codejam/contest/3264486/dashboard" target="_blank" rel="external">Here</a>.</p>
<h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p>桌面上有S (S &lt;= 1000) 枚硬币排成一行，每次可以翻转连续的K枚硬币（只改变正反状态，不改变相对顺序），求从一个初始状态到另一个状态的最少翻转次数。<br><a id="more"></a></p>
<h2 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h2><ul>
<li>pancake的正反状态，仅由初始状态和反转次数决定</li>
</ul>
<h2 id="Code-in-C"><a href="#Code-in-C" class="headerlink" title="Code in C++"></a>Code in C++</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="keyword">int</span> T;</div><div class="line">	<span class="built_in">string</span> s;</div><div class="line">	<span class="keyword">int</span> K;</div><div class="line">	<span class="keyword">int</span> ans;</div><div class="line">	<span class="built_in">cin</span> &gt;&gt; T;</div><div class="line">	FOR(kase, <span class="number">0</span>, T)&#123;</div><div class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"Case #"</span> &lt;&lt; kase + <span class="number">1</span> &lt;&lt; <span class="string">": "</span>;</div><div class="line">		<span class="built_in">cin</span> &gt;&gt; s &gt;&gt; K;</div><div class="line">		ans = <span class="number">0</span>;</div><div class="line">		FOR(i, <span class="number">0</span>, s.length() - K + <span class="number">1</span>) &#123;</div><div class="line">			<span class="keyword">if</span> (s[i] == <span class="string">'-'</span>)&#123;</div><div class="line">				ans ++;</div><div class="line">				FOR(j, i, i+K)</div><div class="line">					s[j] = <span class="string">'-'</span> + <span class="string">'+'</span> - s[j];</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (s != <span class="built_in">string</span>(s.length(), <span class="string">'+'</span>))</div><div class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">"IMPOSSIBLE"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">		<span class="keyword">else</span></div><div class="line">		 	<span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;Problem&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://code.google.com/codejam/contest/3264486/dashboard&quot;&gt;Here&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;题目大意&quot;&gt;&lt;a href=&quot;#题目大意&quot; class=&quot;headerlink&quot; title=&quot;题目大意&quot;&gt;&lt;/a&gt;题目大意&lt;/h2&gt;&lt;p&gt;桌面上有S (S &amp;lt;= 1000) 枚硬币排成一行，每次可以翻转连续的K枚硬币（只改变正反状态，不改变相对顺序），求从一个初始状态到另一个状态的最少翻转次数。&lt;br&gt;
    
    </summary>
    
      <category term="Codejam" scheme="http://jinshendan.github.io/categories/Codejam/"/>
    
    
      <category term="Ad Hoc" scheme="http://jinshendan.github.io/tags/Ad-Hoc/"/>
    
  </entry>
  
  <entry>
    <title>The 3n + 1 problem - UVA 100</title>
    <link href="http://jinshendan.github.io/The-3n1-problem.html"/>
    <id>http://jinshendan.github.io/The-3n1-problem.html</id>
    <published>2018-03-02T15:47:47.000Z</published>
    <updated>2018-03-02T17:22:33.113Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><p><a href="https://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid=8&amp;category=3&amp;page=show_problem&amp;problem=36" target="_blank" rel="external">Here</a>.</p>
<a id="more"></a>
<h2 id="Code-in-C"><a href="#Code-in-C" class="headerlink" title="Code in C++"></a>Code in C++</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> s, t;</div><div class="line"><span class="keyword">int</span> ans;</div><div class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; a;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">	<span class="keyword">int</span> step = <span class="number">1</span>;</div><div class="line">	<span class="keyword">while</span> (x != <span class="number">1</span>)&#123;</div><div class="line">		step ++;</div><div class="line">		<span class="keyword">if</span> (x % <span class="number">2</span> == <span class="number">1</span>)</div><div class="line">			x = <span class="number">3</span>*x + <span class="number">1</span>;</div><div class="line">		<span class="keyword">else</span> x = x / <span class="number">2</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> step;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; s &gt;&gt; t)&#123;</div><div class="line">		<span class="keyword">int</span> u = min(s,t);</div><div class="line">		<span class="keyword">int</span> v = max(s,t);</div><div class="line">		ans = <span class="number">1</span>;</div><div class="line">		FOR(i, u, v+<span class="number">1</span>)</div><div class="line">			<span class="keyword">if</span> (a.find(i) != a.end())</div><div class="line">				ans = max(ans, a[i]);</div><div class="line">			<span class="keyword">else</span> &#123;</div><div class="line">				a[i] = calc(i);</div><div class="line">				ans = max(ans, a[i]);</div><div class="line">			&#125;</div><div class="line">		<span class="built_in">cout</span> &lt;&lt; s &lt;&lt; <span class="string">" "</span> &lt;&lt; t &lt;&lt; <span class="string">" "</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;Problem&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;amp;Itemid=8&amp;amp;category=3&amp;amp;page=show_problem&amp;amp;problem=36&quot;&gt;Here&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
      <category term="UVA" scheme="http://jinshendan.github.io/categories/UVA/"/>
    
    
      <category term="Ad Hoc" scheme="http://jinshendan.github.io/tags/Ad-Hoc/"/>
    
  </entry>
  
  <entry>
    <title>再见, 2017</title>
    <link href="http://jinshendan.github.io/2017-2018.html"/>
    <id>http://jinshendan.github.io/2017-2018.html</id>
    <published>2017-12-31T20:39:50.000Z</published>
    <updated>2017-12-31T20:44:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>2017年的最后一天</p>
<p>莫名奇妙的感冒</p>
<p>平平淡淡的迎接2018</p>
<p>祝你 永远开心</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2017年的最后一天&lt;/p&gt;
&lt;p&gt;莫名奇妙的感冒&lt;/p&gt;
&lt;p&gt;平平淡淡的迎接2018&lt;/p&gt;
&lt;p&gt;祝你 永远开心&lt;/p&gt;

    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Regular Expression Matching - Leetcode A10</title>
    <link href="http://jinshendan.github.io/Regualr-Expression-Matching.html"/>
    <id>http://jinshendan.github.io/Regualr-Expression-Matching.html</id>
    <published>2017-12-23T20:45:13.000Z</published>
    <updated>2017-12-23T20:52:13.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><p><a href="https://leetcode.com/problems/regular-expression-matching/description/" target="_blank" rel="external">Problem description</a></p>
<p>Implement regular expression matching with support for ‘.’ and ‘*’.</p>
<p>‘.’ Matches any single character.<br>‘*’ Matches zero or more of the preceding element.</p>
<p>The matching should cover the entire input string (not partial).</p>
<p>The function prototype should be:<br>bool isMatch(const char <em>s, const char </em>p)</p>
<p>Some examples:<br>isMatch(“aa”,”a”) → false<br>isMatch(“aa”,”aa”) → true<br>isMatch(“aaa”,”aa”) → false<br>isMatch(“aa”, “a<em>“) → true<br>isMatch(“aa”, “.</em>“) → true<br>isMatch(“ab”, “.<em>“) → true<br>isMatch(“aab”, “c</em>a*b”) → true</p>
<a id="more"></a>
<h2 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h2><p>DP</p>
<ul>
<li>dp[i, j] = true if s[i:] == p[j:]</li>
<li>dp[i, j] = dp[i, j+2] or first_matched and dp[i+1, j] if j+1 &lt; len(p) and p[j+1] == ‘*’.</li>
<li>dp[i, j] = first_matched and dp[i+1, j+1], otherwise </li>
<li>first_matched = p[j] in {s[i], ‘.’}<h2 id="Python-Implementation"><a href="#Python-Implementation" class="headerlink" title="Python Implementation"></a>Python Implementation</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isMatch</span><span class="params">(self, s, p)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type s: str</div><div class="line">        :type p: str</div><div class="line">        :rtype: bool</div><div class="line">        """</div><div class="line">        </div><div class="line">        cache = &#123;&#125;</div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">dp</span><span class="params">(i, j)</span>:</span></div><div class="line">        	<span class="keyword">if</span> (i, j) <span class="keyword">not</span> <span class="keyword">in</span> cache:</div><div class="line">        		<span class="keyword">if</span> (j == len(p)):</div><div class="line">        			ans = (i == len(s))</div><div class="line">        		<span class="keyword">else</span>:</div><div class="line">        			first = i &lt; len(s) <span class="keyword">and</span> p[j] <span class="keyword">in</span> &#123;s[i], <span class="string">'.'</span>&#125;</div><div class="line">        			<span class="keyword">if</span> j + <span class="number">1</span> &lt; len(p) <span class="keyword">and</span> p[j + <span class="number">1</span>] == <span class="string">'*'</span>:</div><div class="line">        				ans = dp(i, j + <span class="number">2</span>) <span class="keyword">or</span> first <span class="keyword">and</span> dp(i+<span class="number">1</span>, j)</div><div class="line">        			<span class="keyword">else</span>:</div><div class="line">        				ans = first <span class="keyword">and</span> dp(i+<span class="number">1</span>, j+<span class="number">1</span>)</div><div class="line">        		cache[(i,j)] = ans</div><div class="line">        	<span class="keyword">return</span> cache[(i,j)]</div><div class="line">        <span class="keyword">return</span> dp(<span class="number">0</span>, <span class="number">0</span>)</div></pre></td></tr></table></figure></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;Problem&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/regular-expression-matching/description/&quot;&gt;Problem description&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Implement regular expression matching with support for ‘.’ and ‘*’.&lt;/p&gt;
&lt;p&gt;‘.’ Matches any single character.&lt;br&gt;‘*’ Matches zero or more of the preceding element.&lt;/p&gt;
&lt;p&gt;The matching should cover the entire input string (not partial).&lt;/p&gt;
&lt;p&gt;The function prototype should be:&lt;br&gt;bool isMatch(const char &lt;em&gt;s, const char &lt;/em&gt;p)&lt;/p&gt;
&lt;p&gt;Some examples:&lt;br&gt;isMatch(“aa”,”a”) → false&lt;br&gt;isMatch(“aa”,”aa”) → true&lt;br&gt;isMatch(“aaa”,”aa”) → false&lt;br&gt;isMatch(“aa”, “a&lt;em&gt;“) → true&lt;br&gt;isMatch(“aa”, “.&lt;/em&gt;“) → true&lt;br&gt;isMatch(“ab”, “.&lt;em&gt;“) → true&lt;br&gt;isMatch(“aab”, “c&lt;/em&gt;a*b”) → true&lt;/p&gt;
    
    </summary>
    
      <category term="Leetcode" scheme="http://jinshendan.github.io/categories/Leetcode/"/>
    
    
      <category term="DP" scheme="http://jinshendan.github.io/tags/DP/"/>
    
  </entry>
  
  <entry>
    <title>Palindrome Number - Leetcode A9</title>
    <link href="http://jinshendan.github.io/Palindrome-Number.html"/>
    <id>http://jinshendan.github.io/Palindrome-Number.html</id>
    <published>2017-12-21T21:11:36.000Z</published>
    <updated>2017-12-21T21:14:21.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><p><a href="https://leetcode.com/problems/palindrome-number/description/" target="_blank" rel="external">Problem description</a></p>
<p>Determine whether an integer is a palindrome. Do this without extra space.</p>
<a id="more"></a>
<h2 id="Python-Implementation"><a href="#Python-Implementation" class="headerlink" title="Python Implementation"></a>Python Implementation</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">isPalindrome</span><span class="params">(self, x)</span>:</span></div><div class="line">		<span class="string">"""</span></div><div class="line">		:type x: int</div><div class="line">		:rtype: bool</div><div class="line">		"""</div><div class="line"></div><div class="line">		<span class="keyword">if</span> x &lt; <span class="number">0</span>:</div><div class="line">			<span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">		y = <span class="number">0</span></div><div class="line">		t = x</div><div class="line">		<span class="keyword">while</span> t &gt; <span class="number">0</span>:</div><div class="line">			y = y * <span class="number">10</span> + (t % <span class="number">10</span>)</div><div class="line">			t = t // <span class="number">10</span></div><div class="line">		print(y)</div><div class="line">		<span class="keyword">return</span> x == y</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;Problem&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/palindrome-number/description/&quot;&gt;Problem description&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Determine whether an integer is a palindrome. Do this without extra space.&lt;/p&gt;
    
    </summary>
    
      <category term="Leetcode" scheme="http://jinshendan.github.io/categories/Leetcode/"/>
    
    
  </entry>
  
  <entry>
    <title>Atoi - Leetcode A8</title>
    <link href="http://jinshendan.github.io/Atoi.html"/>
    <id>http://jinshendan.github.io/Atoi.html</id>
    <published>2017-12-21T14:37:51.000Z</published>
    <updated>2017-12-21T14:42:21.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><p><a href="https://leetcode.com/problems/string-to-integer-atoi/description/" target="_blank" rel="external">Problem description</a></p>
<p>Implement atoi to convert a string to an integer.</p>
<p>Requirements for atoi:<br>The function first discards as many whitespace characters as necessary until the first non-whitespace character is found. Then, starting from this character, takes an optional initial plus or minus sign followed by as many numerical digits as possible, and interprets them as a numerical value.</p>
<p>The string can contain additional characters after those that form the integral number, which are ignored and have no effect on the behavior of this function.</p>
<p>If the first sequence of non-whitespace characters in str is not a valid integral number, or if no such sequence exists because either str is empty or it contains only whitespace characters, no conversion is performed.</p>
<p>If no valid conversion could be performed, a zero value is returned. If the correct value is out of the range of representable values, INT_MAX (2147483647) or INT_MIN (-2147483648) is returned.</p>
<a id="more"></a>
<h2 id="Python-Implementation"><a href="#Python-Implementation" class="headerlink" title="Python Implementation"></a>Python Implementation</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">myAtoi</span><span class="params">(self, str)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type str: str</div><div class="line">        :rtype: int</div><div class="line">        """</div><div class="line">        <span class="comment"># discard whitespace</span></div><div class="line">        str = str.strip()</div><div class="line">        </div><div class="line">        sign = <span class="number">1</span></div><div class="line">        i = <span class="number">0</span></div><div class="line">        <span class="keyword">if</span> (str == <span class="string">""</span>):</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span></div><div class="line">            </div><div class="line">        <span class="keyword">if</span> str[<span class="number">0</span>] == <span class="string">'+'</span>:</div><div class="line">            sign = <span class="number">1</span></div><div class="line">            i += <span class="number">1</span></div><div class="line">        <span class="keyword">elif</span> str[<span class="number">0</span>] == <span class="string">'-'</span>:</div><div class="line">            sign = <span class="number">-1</span></div><div class="line">            i += <span class="number">1</span></div><div class="line">        </div><div class="line">        ans = <span class="number">0</span></div><div class="line">        <span class="keyword">while</span> i &lt; len(str) <span class="keyword">and</span> str[i].isdigit():</div><div class="line">            ans = ans * <span class="number">10</span> + int(str[i])</div><div class="line">            i += <span class="number">1</span></div><div class="line"></div><div class="line">        ans = ans * sign</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (i == <span class="number">0</span> <span class="keyword">and</span> str[<span class="number">0</span>] <span class="keyword">not</span> <span class="keyword">in</span> [<span class="string">'+'</span>, <span class="string">'-'</span>]):</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span></div><div class="line">        <span class="keyword">if</span> ans &gt; (<span class="number">1</span>&lt;&lt;<span class="number">31</span>)<span class="number">-1</span>:</div><div class="line">            <span class="keyword">return</span> (<span class="number">1</span>&lt;&lt;<span class="number">31</span>)<span class="number">-1</span></div><div class="line">        <span class="keyword">if</span> ans &lt; -(<span class="number">1</span>&lt;&lt;<span class="number">31</span>):</div><div class="line">            <span class="keyword">return</span> -(<span class="number">1</span>&lt;&lt;<span class="number">31</span>)</div><div class="line"></div><div class="line">        <span class="keyword">return</span> ans</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;Problem&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/string-to-integer-atoi/description/&quot;&gt;Problem description&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Implement atoi to convert a string to an integer.&lt;/p&gt;
&lt;p&gt;Requirements for atoi:&lt;br&gt;The function first discards as many whitespace characters as necessary until the first non-whitespace character is found. Then, starting from this character, takes an optional initial plus or minus sign followed by as many numerical digits as possible, and interprets them as a numerical value.&lt;/p&gt;
&lt;p&gt;The string can contain additional characters after those that form the integral number, which are ignored and have no effect on the behavior of this function.&lt;/p&gt;
&lt;p&gt;If the first sequence of non-whitespace characters in str is not a valid integral number, or if no such sequence exists because either str is empty or it contains only whitespace characters, no conversion is performed.&lt;/p&gt;
&lt;p&gt;If no valid conversion could be performed, a zero value is returned. If the correct value is out of the range of representable values, INT_MAX (2147483647) or INT_MIN (-2147483648) is returned.&lt;/p&gt;
    
    </summary>
    
      <category term="Leetcode" scheme="http://jinshendan.github.io/categories/Leetcode/"/>
    
    
      <category term="string" scheme="http://jinshendan.github.io/tags/string/"/>
    
  </entry>
  
  <entry>
    <title>Reverse Integer - Leetcode A7</title>
    <link href="http://jinshendan.github.io/Reverse-Integer.html"/>
    <id>http://jinshendan.github.io/Reverse-Integer.html</id>
    <published>2017-12-20T22:05:19.000Z</published>
    <updated>2017-12-21T14:43:30.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><p><a href="https://leetcode.com/problems/reverse-integer/description/" target="_blank" rel="external">Problem description</a></p>
<p>Given a 32-bit signed integer, reverse digits of an integer.</p>
<p>Example 1:</p>
<p>Input: 123<br>Output:  321<br>Example 2:</p>
<p>Input: -123<br>Output: -321<br>Example 3:</p>
<p>Input: 120<br>Output: 21<br>Note:<br>Assume we are dealing with an environment which could only hold integers within the 32-bit signed integer range. For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.</p>
<a id="more"></a>
<h2 id="Python-“C-style”-Implementation"><a href="#Python-“C-style”-Implementation" class="headerlink" title="Python “C-style” Implementation"></a>Python “C-style” Implementation</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">reverse</span><span class="params">(self, x)</span>:</span></div><div class="line">		<span class="string">"""</span></div><div class="line">		:type x: int</div><div class="line">		:rtype: int</div><div class="line">		"""</div><div class="line"></div><div class="line">		sign = <span class="number">1</span></div><div class="line">		<span class="keyword">if</span> (x &lt; <span class="number">0</span>):</div><div class="line">			sign = <span class="number">-1</span></div><div class="line">			x = -x</div><div class="line"></div><div class="line">		ans = <span class="number">0</span></div><div class="line">		<span class="keyword">while</span> (x &gt; <span class="number">0</span>):</div><div class="line">			ans = ans * <span class="number">10</span> + x % <span class="number">10</span></div><div class="line">			x = x // <span class="number">10</span></div><div class="line">			<span class="keyword">if</span> ans*sign &gt; ((<span class="number">1</span> &lt;&lt; <span class="number">31</span>) - <span class="number">1</span>) <span class="keyword">or</span> ans*sign &lt; -(<span class="number">1</span> &lt;&lt; <span class="number">31</span>):</div><div class="line">				ans = <span class="number">0</span></div><div class="line">				<span class="keyword">break</span></div><div class="line"></div><div class="line">		<span class="keyword">return</span> ans*sign</div></pre></td></tr></table></figure>
<h2 id="Python-Implementation"><a href="#Python-Implementation" class="headerlink" title="Python Implementation"></a>Python Implementation</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">reverse</span><span class="params">(self, x)</span>:</span></div><div class="line">		<span class="string">"""</span></div><div class="line">		:type x: int</div><div class="line">		:rtype: int</div><div class="line">		"""</div><div class="line">		MaxInt = (<span class="number">1</span>&lt;&lt;<span class="number">31</span>)<span class="number">-1</span></div><div class="line">		MinInt = -(<span class="number">1</span>&lt;&lt;<span class="number">31</span>)</div><div class="line">		<span class="keyword">if</span> x &gt; <span class="number">0</span>:</div><div class="line">			ans = int(str(x)[::<span class="number">-1</span>])</div><div class="line">		<span class="keyword">else</span>:</div><div class="line">			ans = int(str(-x)[::<span class="number">-1</span>])*(<span class="number">-1</span>)</div><div class="line">		<span class="keyword">if</span> (ans &gt; MaxInt <span class="keyword">or</span> ans &lt; MinInt):</div><div class="line">			ans = <span class="number">0</span></div><div class="line">		<span class="keyword">return</span> ans</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;Problem&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/reverse-integer/description/&quot;&gt;Problem description&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Given a 32-bit signed integer, reverse digits of an integer.&lt;/p&gt;
&lt;p&gt;Example 1:&lt;/p&gt;
&lt;p&gt;Input: 123&lt;br&gt;Output:  321&lt;br&gt;Example 2:&lt;/p&gt;
&lt;p&gt;Input: -123&lt;br&gt;Output: -321&lt;br&gt;Example 3:&lt;/p&gt;
&lt;p&gt;Input: 120&lt;br&gt;Output: 21&lt;br&gt;Note:&lt;br&gt;Assume we are dealing with an environment which could only hold integers within the 32-bit signed integer range. For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.&lt;/p&gt;
    
    </summary>
    
      <category term="Leetcode" scheme="http://jinshendan.github.io/categories/Leetcode/"/>
    
    
      <category term="Integer" scheme="http://jinshendan.github.io/tags/Integer/"/>
    
  </entry>
  
  <entry>
    <title>ZigZag Conversion - Leetcode A6</title>
    <link href="http://jinshendan.github.io/ZigZag-Conversion.html"/>
    <id>http://jinshendan.github.io/ZigZag-Conversion.html</id>
    <published>2017-12-20T16:06:37.000Z</published>
    <updated>2017-12-20T16:48:04.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><p><a href="https://leetcode.com/problems/zigzag-conversion/description/" target="_blank" rel="external">Problem description</a></p>
<p>The string “PAYPALISHIRING” is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">P   A   H   N</div><div class="line">A P L S I I G</div><div class="line">Y   I   R</div></pre></td></tr></table></figure>
<p>And then read line by line: “PAHNAPLSIIGYIR”<br>Write the code that will take a string and make this conversion given a number of rows:</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="built_in">string</span> <span class="title">convert</span><span class="params">(<span class="built_in">string</span> text, <span class="keyword">int</span> nRows)</span></span>;</div></pre></td></tr></table></figure>
<p>convert(“PAYPALISHIRING”, 3) should return “PAHNAPLSIIGYIR”.</p>
<a id="more"></a>
<h2 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h2><ul>
<li>n = number of raws</li>
<li>For first and last line, step = 2n-2</li>
<li>For ith lines (except the first and the last), step = 2n-2-2*i, 2n-2</li>
</ul>
<h2 id="Python-Implementation"><a href="#Python-Implementation" class="headerlink" title="Python Implementation"></a>Python Implementation</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">convert</span><span class="params">(self, s, numRows)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type s: str</div><div class="line">        :type numRows: int</div><div class="line">        :rtype: str</div><div class="line">        """</div><div class="line">        </div><div class="line">        <span class="keyword">if</span> (numRows == <span class="number">1</span>):</div><div class="line">        	<span class="keyword">return</span> s</div><div class="line">        step = numRows * <span class="number">2</span> - <span class="number">2</span></div><div class="line">        ans = <span class="string">""</span></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(numRows):</div><div class="line">        	index = i</div><div class="line">        	step2 = step - i * <span class="number">2</span></div><div class="line">        	<span class="keyword">if</span> (index &gt;= len(s)):</div><div class="line">        		<span class="keyword">break</span></div><div class="line">        	ans += s[index]</div><div class="line">        	<span class="keyword">while</span> (<span class="number">1</span>):</div><div class="line">        		<span class="keyword">if</span> (step2 != <span class="number">0</span> <span class="keyword">and</span> step2 != step):</div><div class="line">        			<span class="keyword">if</span> (index + step2 &gt;= len(s)):</div><div class="line">        				<span class="keyword">break</span></div><div class="line">        			ans += s[index + step2]</div><div class="line">        		</div><div class="line">        		index += step</div><div class="line">        		<span class="keyword">if</span> (index &gt;= len(s)):</div><div class="line">        			<span class="keyword">break</span></div><div class="line">        		ans += s[index]        		</div><div class="line">        <span class="keyword">return</span> ans</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;Problem&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/zigzag-conversion/description/&quot;&gt;Problem description&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The string “PAYPALISHIRING” is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;P   A   H   N&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;A P L S I I G&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Y   I   R&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;And then read line by line: “PAHNAPLSIIGYIR”&lt;br&gt;Write the code that will take a string and make this conversion given a number of rows:&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;convert&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt; text, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; nRows)&lt;/span&gt;&lt;/span&gt;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;convert(“PAYPALISHIRING”, 3) should return “PAHNAPLSIIGYIR”.&lt;/p&gt;
    
    </summary>
    
      <category term="Leetcode" scheme="http://jinshendan.github.io/categories/Leetcode/"/>
    
    
      <category term="Maths" scheme="http://jinshendan.github.io/tags/Maths/"/>
    
  </entry>
  
  <entry>
    <title>Longest Palindromic Substring - Leetcode A5</title>
    <link href="http://jinshendan.github.io/Longest-Palindromic-Substring.html"/>
    <id>http://jinshendan.github.io/Longest-Palindromic-Substring.html</id>
    <published>2017-12-20T14:20:59.000Z</published>
    <updated>2017-12-20T16:10:05.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><p><a href="https://leetcode.com/problems/longest-palindromic-substring/description/" target="_blank" rel="external">Problem description</a><br>Given a string s, find the longest palindromic substring in s. You may assume that the maximum length of s is 1000.</p>
<p>Example:</p>
<p>Input: “babad”</p>
<p>Output: “bab”</p>
<p>Note: “aba” is also a valid answer.</p>
<a id="more"></a>
<h2 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h2><ul>
<li>Dynamic programming, O(n^2)</li>
<li>s[i..j] is a palindromic substring iff s[i+1..j-1] is and s[i] == s[j]</li>
</ul>
<h2 id="Python-Implementation"><a href="#Python-Implementation" class="headerlink" title="Python Implementation"></a>Python Implementation</h2><ul>
<li>Complexity: O(n^2)</li>
<li>Time limit exceeded<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">longestPalindrome</span><span class="params">(self, s)</span>:</span></div><div class="line">		<span class="string">"""</span></div><div class="line">		:type s: str</div><div class="line">		:rtype: str</div><div class="line">		"""</div><div class="line">		f = [[ <span class="keyword">False</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(len(s) + <span class="number">1</span>)] <span class="keyword">for</span> i <span class="keyword">in</span> range(len(s))]</div><div class="line">		<span class="keyword">for</span> i <span class="keyword">in</span> range(len(s)):</div><div class="line">			f[i][<span class="number">1</span>] = <span class="keyword">True</span></div><div class="line">			f[i][<span class="number">0</span>] = <span class="keyword">True</span></div><div class="line">		ans = <span class="number">1</span></div><div class="line">		ansi = <span class="number">0</span></div><div class="line">		lens = len(s)</div><div class="line">		<span class="keyword">for</span> L <span class="keyword">in</span> range(<span class="number">2</span>, lens+<span class="number">1</span>):</div><div class="line">			<span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, lens + <span class="number">1</span> - L):</div><div class="line">				<span class="keyword">if</span> (s[i] == s[i+L<span class="number">-1</span>]):</div><div class="line">					f[i][L] = f[i+<span class="number">1</span>][L<span class="number">-2</span>]</div><div class="line">					<span class="keyword">if</span> (f[i][L]):</div><div class="line">						ans = L</div><div class="line">						ansi = i</div><div class="line">		<span class="keyword">return</span> s[ansi: ansi + ans]</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="C-Implementation"><a href="#C-Implementation" class="headerlink" title="C++ Implementation"></a>C++ Implementation</h2><ul>
<li>Complexity: O(n^2)</li>
<li>Accepted<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="built_in">string</span> <span class="title">longestPalindrome</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> f[<span class="number">1000</span>][<span class="number">1005</span>];</div><div class="line">        <span class="built_in">memset</span>(f, <span class="number">0</span>, <span class="keyword">sizeof</span>(f));</div><div class="line">        <span class="keyword">int</span> n = s.length();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</div><div class="line">        	f[i][<span class="number">0</span>] = f[i][<span class="number">1</span>] = <span class="number">1</span>;</div><div class="line">        <span class="keyword">int</span> ans = <span class="number">1</span>;</div><div class="line">        <span class="keyword">int</span> ansi = <span class="number">0</span>;</div><div class="line">       	<span class="keyword">for</span> (<span class="keyword">int</span> L = <span class="number">2</span>; L &lt;= n; L++) &#123;</div><div class="line">       		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n - L; i++)&#123;</div><div class="line">       			<span class="keyword">if</span> (s[i] == s[i + L <span class="number">-1</span>])</div><div class="line">       				f[i][L] = f[i+<span class="number">1</span>][L<span class="number">-2</span>];</div><div class="line">       			<span class="keyword">if</span> (f[i][L])&#123;</div><div class="line">       				ans = L;</div><div class="line">       				ansi = i;</div><div class="line">       			&#125;</div><div class="line">       		&#125;</div><div class="line">       	&#125;</div><div class="line">       	<span class="keyword">return</span> s.substr(ansi, ans);</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;Problem&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/longest-palindromic-substring/description/&quot;&gt;Problem description&lt;/a&gt;&lt;br&gt;Given a string s, find the longest palindromic substring in s. You may assume that the maximum length of s is 1000.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;p&gt;Input: “babad”&lt;/p&gt;
&lt;p&gt;Output: “bab”&lt;/p&gt;
&lt;p&gt;Note: “aba” is also a valid answer.&lt;/p&gt;
    
    </summary>
    
      <category term="Leetcode" scheme="http://jinshendan.github.io/categories/Leetcode/"/>
    
    
      <category term="DP" scheme="http://jinshendan.github.io/tags/DP/"/>
    
  </entry>
  
  <entry>
    <title>Median of two sorted arrays - Leetcode A4</title>
    <link href="http://jinshendan.github.io/Median-of-two-sorted-arrays.html"/>
    <id>http://jinshendan.github.io/Median-of-two-sorted-arrays.html</id>
    <published>2017-12-19T21:45:53.000Z</published>
    <updated>2017-12-20T15:51:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><p><a href="https://leetcode.com/problems/median-of-two-sorted-arrays/description/" target="_blank" rel="external">Problem description</a></p>
<p>There are two sorted arrays nums1 and nums2 of size m and n respectively.</p>
<p>Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).</p>
<a id="more"></a>
<h2 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h2><ul>
<li>Binary Search</li>
<li>K-th elements in two sorted arrays</li>
</ul>
<h2 id="Python-Implementation"><a href="#Python-Implementation" class="headerlink" title="Python Implementation"></a>Python Implementation</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">get_k_th</span><span class="params">(self, a, b, n, m, k)</span>:</span></div><div class="line">		<span class="keyword">if</span> (n &lt;= <span class="number">0</span>): <span class="keyword">return</span> b[k<span class="number">-1</span>]</div><div class="line">		<span class="keyword">if</span> (m &lt;= <span class="number">0</span>): <span class="keyword">return</span> a[k<span class="number">-1</span>]</div><div class="line">		<span class="keyword">if</span> (k == <span class="number">1</span>): <span class="keyword">return</span> min(a[<span class="number">0</span>], b[<span class="number">0</span>])</div><div class="line">		<span class="keyword">if</span> (b[m // <span class="number">2</span>] &gt;= a[n // <span class="number">2</span>]):</div><div class="line">			<span class="keyword">if</span> n//<span class="number">2</span> + m // <span class="number">2</span> + <span class="number">2</span> &gt; k:</div><div class="line">				<span class="keyword">return</span> self.get_k_th(a, b, n, m//<span class="number">2</span>, k)</div><div class="line">			<span class="keyword">else</span>:</div><div class="line">				<span class="keyword">return</span> self.get_k_th(a[n//<span class="number">2</span>+<span class="number">1</span>:], b, n - (n//<span class="number">2</span>+<span class="number">1</span>), m, k - (n // <span class="number">2</span> + <span class="number">1</span>))</div><div class="line">		<span class="keyword">else</span>:</div><div class="line">			<span class="keyword">if</span> n//<span class="number">2</span> + m // <span class="number">2</span> + <span class="number">2</span> &gt; k:</div><div class="line">				<span class="keyword">return</span> self.get_k_th(a, b, n//<span class="number">2</span>, m, k)</div><div class="line">			<span class="keyword">else</span>:</div><div class="line">				<span class="keyword">return</span> self.get_k_th(a, b[m//<span class="number">2</span>+<span class="number">1</span>:], n, m - (m//<span class="number">2</span>+<span class="number">1</span>), k - (m // <span class="number">2</span> + <span class="number">1</span>))</div><div class="line"></div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">findMedianSortedArrays</span><span class="params">(self, nums1, nums2)</span>:</span></div><div class="line">		<span class="string">"""</span></div><div class="line">		:type nums1: List[int]</div><div class="line">		:type nums2: List[int]</div><div class="line">		:rtype: float</div><div class="line">		"""</div><div class="line"></div><div class="line">		n = len(nums1)</div><div class="line">		m = len(nums2)</div><div class="line">		<span class="keyword">if</span> (n + m) % <span class="number">2</span> == <span class="number">0</span>:</div><div class="line">			<span class="keyword">return</span> (self.get_k_th(nums1, nums2, n, m, (n+m)//<span class="number">2</span>) + self.get_k_th(nums1, nums2, n, m, (n+m)//<span class="number">2</span> +<span class="number">1</span>)) / <span class="number">2</span></div><div class="line">		<span class="keyword">else</span>:</div><div class="line">			<span class="keyword">return</span> self.get_k_th(nums1, nums2, n, m, (n+m)//<span class="number">2</span>+<span class="number">1</span>)</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;Problem&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/median-of-two-sorted-arrays/description/&quot;&gt;Problem description&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;There are two sorted arrays nums1 and nums2 of size m and n respectively.&lt;/p&gt;
&lt;p&gt;Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).&lt;/p&gt;
    
    </summary>
    
      <category term="Leetcode" scheme="http://jinshendan.github.io/categories/Leetcode/"/>
    
    
      <category term="Binary Search" scheme="http://jinshendan.github.io/tags/Binary-Search/"/>
    
  </entry>
  
  <entry>
    <title>Longest substring without repeating characters - Leetcode A3</title>
    <link href="http://jinshendan.github.io/longest-substring-without-repeating-characters.html"/>
    <id>http://jinshendan.github.io/longest-substring-without-repeating-characters.html</id>
    <published>2017-12-19T21:36:31.000Z</published>
    <updated>2017-12-19T21:44:09.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><p><a href="https://leetcode.com/problems/longest-substring-without-repeating-characters/description/" target="_blank" rel="external">Problem description</a>.</p>
<p>Given a string, find the length of the longest substring without repeating characters.</p>
<p>Examples:</p>
<p>Given “abcabcbb”, the answer is “abc”, which the length is 3.</p>
<p>Given “bbbbb”, the answer is “b”, with the length of 1.</p>
<p>Given “pwwkew”, the answer is “wke”, with the length of 3. Note that the answer must be a substring, “pwke” is a subsequence and not a substring.</p>
<a id="more"></a>
<h2 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h2><ul>
<li>Sliding window</li>
</ul>
<h2 id="Python-Implementation"><a href="#Python-Implementation" class="headerlink" title="Python Implementation"></a>Python Implementation</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(self, s)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type s: str</div><div class="line">        :rtype: int</div><div class="line">        """</div><div class="line">        ss = set()</div><div class="line">        start = <span class="number">0</span></div><div class="line">        maxlen = <span class="number">0</span></div><div class="line">        <span class="keyword">for</span> i, x <span class="keyword">in</span> enumerate(s):</div><div class="line">        	<span class="keyword">while</span> x <span class="keyword">in</span> ss:</div><div class="line">        		ss.remove(s[start])</div><div class="line">        		start += <span class="number">1</span></div><div class="line">        	ss.add(x)</div><div class="line">        	maxlen = max(maxlen, i - start + <span class="number">1</span>)</div><div class="line">        	<span class="comment"># print(start, i, maxlen)</span></div><div class="line">        <span class="keyword">return</span> maxlen</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;Problem&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/longest-substring-without-repeating-characters/description/&quot;&gt;Problem description&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Given a string, find the length of the longest substring without repeating characters.&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;p&gt;Given “abcabcbb”, the answer is “abc”, which the length is 3.&lt;/p&gt;
&lt;p&gt;Given “bbbbb”, the answer is “b”, with the length of 1.&lt;/p&gt;
&lt;p&gt;Given “pwwkew”, the answer is “wke”, with the length of 3. Note that the answer must be a substring, “pwke” is a subsequence and not a substring.&lt;/p&gt;
    
    </summary>
    
      <category term="Leetcode" scheme="http://jinshendan.github.io/categories/Leetcode/"/>
    
    
      <category term="sliding window" scheme="http://jinshendan.github.io/tags/sliding-window/"/>
    
  </entry>
  
  <entry>
    <title>Add Two Numbers - Leetcode A2</title>
    <link href="http://jinshendan.github.io/Add-Two-Numbers.html"/>
    <id>http://jinshendan.github.io/Add-Two-Numbers.html</id>
    <published>2017-12-19T21:25:52.000Z</published>
    <updated>2017-12-19T21:40:08.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><p><a href="https://leetcode.com/problems/add-two-numbers/description/" target="_blank" rel="external">Problem description</a>.</p>
<p>You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.</p>
<p>You may assume the two numbers do not contain any leading zero, except the number 0 itself.</p>
<a id="more"></a>
<h2 id="Python-Implementation"><a href="#Python-Implementation" class="headerlink" title="Python Implementation"></a>Python Implementation</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Definition for singly-linked list.</span></div><div class="line"><span class="comment"># class ListNode(object):</span></div><div class="line"><span class="comment">#     def __init__(self, x):</span></div><div class="line"><span class="comment">#         self.val = x</span></div><div class="line"><span class="comment">#         self.next = None</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addTwoNumbers</span><span class="params">(self, l1, l2)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type l1: ListNode</div><div class="line">        :type l2: ListNode</div><div class="line">        :rtype: ListNode</div><div class="line">        """</div><div class="line">        tete = ListNode(<span class="number">0</span>)</div><div class="line">        pre = tete</div><div class="line">        t = <span class="number">0</span></div><div class="line">        <span class="keyword">while</span> (l1 != <span class="keyword">None</span> <span class="keyword">or</span> l2 != <span class="keyword">None</span>):</div><div class="line">            node = ListNode(<span class="number">0</span>)</div><div class="line">            pre.next = node</div><div class="line">            <span class="keyword">if</span> (l1 == <span class="keyword">None</span>):</div><div class="line">                node.val =  (l2.val + t) % <span class="number">10</span></div><div class="line">                t = (l2.val + t) // <span class="number">10</span></div><div class="line">                l2 = l2.next</div><div class="line">            <span class="keyword">elif</span> (l2 == <span class="keyword">None</span>):</div><div class="line">                node.val = (l1.val + t) % <span class="number">10</span></div><div class="line">                t = (l1.val + t) // <span class="number">10</span></div><div class="line">                l1 = l1.next</div><div class="line">            <span class="keyword">else</span>: </div><div class="line">                node.val = (l1.val + l2.val + t) % <span class="number">10</span></div><div class="line">                t = (l1.val + l2.val + t) // <span class="number">10</span></div><div class="line">                l1 = l1.next</div><div class="line">                l2 = l2.next</div><div class="line">            pre = node</div><div class="line">        </div><div class="line">        <span class="keyword">if</span> (t &gt; <span class="number">0</span>):</div><div class="line">            node = ListNode(t)</div><div class="line">            pre.next = node</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> tete.next</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;Problem&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/add-two-numbers/description/&quot;&gt;Problem description&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.&lt;/p&gt;
&lt;p&gt;You may assume the two numbers do not contain any leading zero, except the number 0 itself.&lt;/p&gt;
    
    </summary>
    
      <category term="Leetcode" scheme="http://jinshendan.github.io/categories/Leetcode/"/>
    
    
      <category term="linked list" scheme="http://jinshendan.github.io/tags/linked-list/"/>
    
  </entry>
  
  <entry>
    <title>Approximation algorithm of Knapsack problem</title>
    <link href="http://jinshendan.github.io/APX-knapsack.html"/>
    <id>http://jinshendan.github.io/APX-knapsack.html</id>
    <published>2017-08-16T23:13:00.000Z</published>
    <updated>2017-11-01T10:42:41.000Z</updated>
    
    <content type="html"><![CDATA[<script type="text/x-mathjax-config">
MathJax.Hub.Config({
tex2jax: {inlineMath: [['$','$'], ['\\(','\\)']]}
});
</script>

<script type="text/javascript" async src="https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-MML-AM_CHTML">
</script>

<a id="more"></a>
<h2 id="Knapsack-problem"><a href="#Knapsack-problem" class="headerlink" title="Knapsack problem"></a>Knapsack problem</h2><hr>
<p>We have an algorithm (dynamic programming) when values are small integers.</p>
<h3 id="Approximation-algorithm"><a href="#Approximation-algorithm" class="headerlink" title="Approximation algorithm"></a>Approximation algorithm</h3><hr>
<ul>
<li><p>Idea: modify input so that values are small integers and we can then use the previous algorithm as a black box.</p>
</li>
<li><p>Scale and round.</p>
</li>
</ul>
<h3 id="Algorithm-description"><a href="#Algorithm-description" class="headerlink" title="Algorithm description"></a>Algorithm description</h3><hr>
<ol>
<li>Discard items that don’t fit in the knapsack.</li>
<li>Multiply each value by $\alpha = \frac{N}{max_j {v_j}} $ so that the values become small, where $N$ is the maximum scaled value, $$v_i \leftarrow v_i * \alpha$$.</li>
<li>Round values to integers and use the DP to solve the reduced problem.</li>
</ol>
<p>We have to choose $N$,</p>
<ul>
<li>small enough that the runtime is polynomial;</li>
<li>large enough that the result is closed to OPT.</li>
</ul>
<h3 id="Runtime-analysis"><a href="#Runtime-analysis" class="headerlink" title="Runtime analysis"></a>Runtime analysis</h3><hr>
<ul>
<li>DP: $O(n*m)$.</li>
<li>Apx: $m = n*N$, $O(n^2N)$.</li>
</ul>
<h3 id="Approximation-ratio-analysis"><a href="#Approximation-ratio-analysis" class="headerlink" title="Approximation ratio analysis"></a>Approximation ratio analysis</h3><hr>
<ul>
<li>Let $S$ be output items, then $S$ is optimal for the reduced input.</li>
<li>Let $S^{*}$ be optimal items, then $S$ is optimal for the scaled unrounded input since scaling do not change structure.</li>
</ul>
<ul>
<li>$Value(S) = \sum_S{v_i} = \frac{1}{\alpha}\sum_S(\alpha v_i)$, then $Value(S) \geq \frac{1}{\alpha}\sum_S{v^{‘}_i}$.</li>
<li>\(\sum_S v^{‘}<em>i \geq \sum</em>{S^{*}} \sum_S \)</li>
</ul>
<p>since $S$ is optimal for reduced problem.</p>
]]></content>
    
    <summary type="html">
    
      &lt;script type=&quot;text/x-mathjax-config&quot;&gt;
MathJax.Hub.Config({
tex2jax: {inlineMath: [[&#39;$&#39;,&#39;$&#39;], [&#39;\\(&#39;,&#39;\\)&#39;]]}
});
&lt;/script&gt;

&lt;script type=&quot;text/javascript&quot; async
  src=&quot;https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-MML-AM_CHTML&quot;&gt;
&lt;/script&gt;
    
    </summary>
    
      <category term="approximation" scheme="http://jinshendan.github.io/categories/approximation/"/>
    
    
      <category term="approximation" scheme="http://jinshendan.github.io/tags/approximation/"/>
    
      <category term="dp" scheme="http://jinshendan.github.io/tags/dp/"/>
    
      <category term="rounding" scheme="http://jinshendan.github.io/tags/rounding/"/>
    
  </entry>
  
  <entry>
    <title>generator - Regionals 2015 Asia-Hangzhou</title>
    <link href="http://jinshendan.github.io/generator.html"/>
    <id>http://jinshendan.github.io/generator.html</id>
    <published>2017-04-18T20:00:12.000Z</published>
    <updated>2017-04-18T20:10:03.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><p>We generate a random string by generating a sequence of random characters and concatenating them together. Each character is chosen independently from the first n letters in the English alphabet with equal probability. Only capital letters are used in this problem. The generation is stopped as soon as a specific pattern occurs in the random string. Your task is to predict the expected length of the generated string.</p>
<h2 id="Limits"><a href="#Limits" class="headerlink" title="Limits"></a>Limits</h2><ul>
<li>1 &lt;= T &lt;= 10.</li>
<li>1 &lt;= n &lt;= 26.</li>
<li>The length of any pattern will not exceed 12.</li>
</ul>
<a id="more"></a>
<h2 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h2><ul>
<li>For any string S, define the function state(S) as the maximal length of the prefix of pattern which is also a suffix of the current string at the same time.</li>
<li>If the pattern has length L, then the state of any string is a number between 0 and L. </li>
<li>We know that L is a final state. </li>
<li>Let’s define f[i] as the expected number of steps from state i to state L. </li>
<li>Then we have f[i] = 1+ 1/n(f[a(1,1)]+f[a(1,2)]+…+f[a(1,n)]), where a(i,j) is the state of the new string after concatenating the current string and the j-th letter together. </li>
<li>Thus, the answer is f[0].</li>
</ul>
<h2 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a>Notes</h2><ul>
<li>We can use brute-force to compute a(i,j).</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;Problem&lt;/h2&gt;&lt;p&gt;We generate a random string by generating a sequence of random characters and concatenating them together. Each character is chosen independently from the first n letters in the English alphabet with equal probability. Only capital letters are used in this problem. The generation is stopped as soon as a specific pattern occurs in the random string. Your task is to predict the expected length of the generated string.&lt;/p&gt;
&lt;h2 id=&quot;Limits&quot;&gt;&lt;a href=&quot;#Limits&quot; class=&quot;headerlink&quot; title=&quot;Limits&quot;&gt;&lt;/a&gt;Limits&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;1 &amp;lt;= T &amp;lt;= 10.&lt;/li&gt;
&lt;li&gt;1 &amp;lt;= n &amp;lt;= 26.&lt;/li&gt;
&lt;li&gt;The length of any pattern will not exceed 12.&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="LA" scheme="http://jinshendan.github.io/categories/LA/"/>
    
    
      <category term="Probability" scheme="http://jinshendan.github.io/tags/Probability/"/>
    
      <category term="DP" scheme="http://jinshendan.github.io/tags/DP/"/>
    
  </entry>
  
  <entry>
    <title>Coupons - UVA 10288</title>
    <link href="http://jinshendan.github.io/Coupons.html"/>
    <id>http://jinshendan.github.io/Coupons.html</id>
    <published>2017-04-18T19:50:10.000Z</published>
    <updated>2017-04-18T20:10:19.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><p>There are n coupons numbered from 1 to n. How many times on average are required to make a complete set of n coupons<br>by selecting one coupon each time? </p>
<p>If the answer is an integer number, output the number. If the answer is not integer, then output the integer part of the answer followed by a space and then by the proper fraction in the format Num/Denom. The fractional part should be irreducible.</p>
<h2 id="Limits"><a href="#Limits" class="headerlink" title="Limits"></a>Limits</h2><ul>
<li>1 &lt;= n &lt;= 33</li>
</ul>
<a id="more"></a>
<h2 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h2><ul>
<li>Assume that we have already k different coupons.</li>
<li>Then the probability of getting a new different coupon is (n-k)/n. The expected cost is n/(n-k). </li>
<li>Thus the expected number of times to make a complete set of n coupons is n/n+n/(n-1)+…+n/1 = n(1/1+1/2+1/3+…+1/n).</li>
</ul>
<h2 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a>Notes</h2><ul>
<li>Make the fractional part irreducible after each addition to avoid any over 64 bits integers.</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;Problem&lt;/h2&gt;&lt;p&gt;There are n coupons numbered from 1 to n. How many times on average are required to make a complete set of n coupons&lt;br&gt;by selecting one coupon each time? &lt;/p&gt;
&lt;p&gt;If the answer is an integer number, output the number. If the answer is not integer, then output the integer part of the answer followed by a space and then by the proper fraction in the format Num/Denom. The fractional part should be irreducible.&lt;/p&gt;
&lt;h2 id=&quot;Limits&quot;&gt;&lt;a href=&quot;#Limits&quot; class=&quot;headerlink&quot; title=&quot;Limits&quot;&gt;&lt;/a&gt;Limits&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;1 &amp;lt;= n &amp;lt;= 33&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="UVA" scheme="http://jinshendan.github.io/categories/UVA/"/>
    
    
      <category term="Probability" scheme="http://jinshendan.github.io/tags/Probability/"/>
    
      <category term="Fraction" scheme="http://jinshendan.github.io/tags/Fraction/"/>
    
  </entry>
  
  <entry>
    <title>Learning C++ (1)</title>
    <link href="http://jinshendan.github.io/Learning-C.html"/>
    <id>http://jinshendan.github.io/Learning-C.html</id>
    <published>2017-02-26T13:21:15.000Z</published>
    <updated>2017-03-01T23:19:35.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Simple-Variables"><a href="#Simple-Variables" class="headerlink" title="Simple Variables"></a>Simple Variables</h2><hr>
<h3 id="Byte-and-bit"><a href="#Byte-and-bit" class="headerlink" title="Byte and bit"></a>Byte and bit</h3><ul>
<li>Usually, 1 byte = 8 bits. </li>
<li>In C++, 1 byte = number of bits per char.</li>
<li>Using the library “climits” to determine the limit. </li>
</ul>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">"int is "</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="keyword">int</span>) &lt;&lt; <span class="string">" bytes."</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">"short is "</span> &lt;&lt; <span class="keyword">sizeof</span> (SHRT_MAX) &lt;&lt; <span class="string">" bytes"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">"long is "</span> &lt;&lt; <span class="keyword">sizeof</span> (LONG_MAX) &lt;&lt; <span class="string">" bytes"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">"long long is "</span> &lt;&lt; <span class="keyword">sizeof</span>(LLONG_MAX) &lt;&lt; <span class="string">" bytes"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">"Bits per byte = "</span> &lt;&lt; CHAR_BIT &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">"Maximum int values: "</span> &lt;&lt; INT_MAX &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">"Minimum int values: "</span> &lt;&lt; INT_MIN &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h3 id="Using-to-initilize-the-varaibles"><a href="#Using-to-initilize-the-varaibles" class="headerlink" title="Using {} to initilize the varaibles."></a>Using {} to initilize the varaibles.</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">- <span class="keyword">int</span> x&#123;<span class="number">7</span>&#125;;	<span class="comment">//Set x to 7.</span></div><div class="line">- <span class="keyword">int</span> y = &#123;<span class="number">1</span>&#125;	<span class="comment">//Set y to 1.</span></div><div class="line">- <span class="keyword">int</span> z = &#123;&#125;; 	<span class="comment">//Set z to 0.</span></div></pre></td></tr></table></figure>
<hr>
<h3 id="Hex-and-Octal-literals"><a href="#Hex-and-Octal-literals" class="headerlink" title="Hex and Octal literals"></a>Hex and Octal literals</h3><ul>
<li>An integer in C++ also has Hex and Octal representations.</li>
<li>C++ uses the first two bits to identify the base.</li>
<li>In decimal, the first bit is 1-9.</li>
<li>In octal, the first bit is 0 and the second bit is 1-7.</li>
<li><p>In hex, the first two bits are 0X or 0x. </p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="keyword">int</span> x = <span class="number">32</span>;</div><div class="line">	<span class="keyword">int</span> y = <span class="number">0x32</span>;</div><div class="line">	<span class="keyword">int</span> z = <span class="number">032</span>;</div><div class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">"x = "</span> &lt;&lt; x &lt;&lt; <span class="string">" in decimal"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">"y = "</span> &lt;&lt; y &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">"z = "</span> &lt;&lt; z &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>By default, cout prints the number in decimal.</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cout</span> &lt;&lt; hex;</div><div class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"y = "</span> &lt;&lt; y &lt;&lt; <span class="string">" in hex"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line"><span class="built_in">cout</span> &lt;&lt; oct;</div><div class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"z = "</span> &lt;&lt; z &lt;&lt; <span class="string">" in oct"</span> &lt;&lt; <span class="built_in">endl</span>;</div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><hr>
<h3 id="C-style-string"><a href="#C-style-string" class="headerlink" title="C-style string"></a>C-style string</h3><ul>
<li>Library “cstring”, strlen(), …</li>
<li>‘\0’ at the end of the string</li>
</ul>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="keyword">char</span> tab[<span class="number">20</span>];</div><div class="line">	<span class="built_in">cin</span> &gt;&gt; tab;	<span class="comment">//Input "Alain Turing"</span></div><div class="line">	<span class="built_in">cout</span> &lt;&lt; tab &lt;&lt; <span class="built_in">endl</span>; <span class="comment">//Output: Alain</span></div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>We get only one word here, not the entire string</li>
</ul>
<hr>
<h3 id="cin-getline-and-cin-get"><a href="#cin-getline-and-cin-get" class="headerlink" title="cin.getline() and cin.get()"></a>cin.getline() and cin.get()</h3><ul>
<li>getline() drops the ‘\n’ in the input stream, get() keeps the ‘\n’.</li>
</ul>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="keyword">char</span> tab[<span class="number">20</span>];</div><div class="line">	<span class="built_in">cin</span>.getline(tab, <span class="number">6</span>);  <span class="comment">// Input: "Cat Dog"</span></div><div class="line">	<span class="built_in">cout</span> &lt;&lt; tab &lt;&lt; <span class="built_in">endl</span>;	<span class="comment">//Output: "Cat D"</span></div><div class="line">	<span class="built_in">cin</span>.clear();	<span class="comment">// Clear the failbit</span></div><div class="line">	<span class="built_in">cin</span>.getline(tab, <span class="number">20</span>);	<span class="comment">//Input: "og"</span></div><div class="line">	<span class="built_in">cout</span> &lt;&lt; tab &lt;&lt; <span class="built_in">endl</span>;	<span class="comment">//Output: "og"</span></div><div class="line"></div><div class="line"></div><div class="line">	<span class="built_in">cin</span>.get(tab, <span class="keyword">sizeof</span>(tab), <span class="string">'o'</span>); <span class="comment">//Input: "I'm good"</span></div><div class="line">	<span class="built_in">cout</span> &lt;&lt; tab &lt;&lt; <span class="built_in">endl</span>;	<span class="comment">//Output: "I'm g"</span></div><div class="line">	<span class="built_in">cin</span>.get(tab, <span class="keyword">sizeof</span>(tab)).get(); <span class="comment">//Input: "ood"</span></div><div class="line">	<span class="built_in">cout</span> &lt;&lt; tab &lt;&lt; <span class="built_in">endl</span>;	<span class="comment">//Output: "ood"</span></div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>Do not forget to use a cin.clear() after using a cin.getline() and cin.get(), because there may be a failbit when the input stream is bigger than the need.</li>
<li>cin.get(): get a char, we can use it to ignore the ‘\n’.</li>
</ul>
<hr>
<h3 id="String-class"><a href="#String-class" class="headerlink" title="String class"></a>String class</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="built_in">string</span> str;</div><div class="line">	getline(<span class="built_in">cin</span>, str); <span class="comment">//Read a line.</span></div><div class="line">	<span class="built_in">cout</span> &lt;&lt; str &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Simple-Variables&quot;&gt;&lt;a href=&quot;#Simple-Variables&quot; class=&quot;headerlink&quot; title=&quot;Simple Variables&quot;&gt;&lt;/a&gt;Simple Variables&lt;/h2&gt;&lt;hr&gt;
&lt;h3 id=&quot;Byte
    
    </summary>
    
      <category term="C++" scheme="http://jinshendan.github.io/categories/C/"/>
    
    
      <category term="C++" scheme="http://jinshendan.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>ProgSys(1) -- Process and Fork</title>
    <link href="http://jinshendan.github.io/progsys-fork.html"/>
    <id>http://jinshendan.github.io/progsys-fork.html</id>
    <published>2016-11-18T16:01:51.000Z</published>
    <updated>2016-11-20T13:46:49.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Process"><a href="#Process" class="headerlink" title="Process"></a>Process</h2><hr>
<h3 id="Process-program-in-execution"><a href="#Process-program-in-execution" class="headerlink" title="Process = program in execution"></a>Process = program in execution</h3><ul>
<li>One or more threads.</li>
<li>Can communicate through pipes, signals, networks, files.</li>
</ul>
<hr>
<h3 id="Process-descriptor"><a href="#Process-descriptor" class="headerlink" title="Process descriptor"></a>Process descriptor</h3><ul>
<li>Each process has its Process Descriptor, which is used to keep track of the process in memory</li>
<li>Stores PID, state, parent process, children, registers, address space information, open files</li>
<li>Process information is usually stored in the so called Process Table, i.e. an array of PD</li>
</ul>
<hr>
<h3 id="Three-states-model"><a href="#Three-states-model" class="headerlink" title="Three states model"></a>Three states model</h3><ul>
<li>Running : execution, process is using the CPU.</li>
<li>Ready : process can be executed but is temporarily waiting, CPU is used by another process.</li>
<li>Waiting : process can’t be executed; it is either blocked because waiting for an external event (e.g. I/O, interrupt from another process) or because scheduler assigned CPU to others.</li>
</ul>
<hr>
<h3 id="Code-in-C"><a href="#Code-in-C" class="headerlink" title="Code in C"></a>Code in C</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></div><div class="line"><span class="keyword">gid_t</span> getgid (<span class="keyword">void</span>);</div><div class="line"><span class="keyword">pid_t</span> getpid (<span class="keyword">void</span>);</div><div class="line"><span class="keyword">pid_t</span> getppid (<span class="keyword">void</span>);</div><div class="line"><span class="keyword">uid_t</span> getuid (<span class="keyword">void</span>);</div></pre></td></tr></table></figure>
<ul>
<li>getpid(): returns the process ID of the calling process.</li>
<li>getppid() : returns the process ID of the parent of the calling process.</li>
<li>getgid() : returns the group ID of the calling process</li>
<li>getuid() : returns the user ID of the calling process</li>
</ul>
<hr>
<h3 id="Creat"><a href="#Creat" class="headerlink" title="Creat"></a>Creat</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">pid_t</span> p = fork();</div></pre></td></tr></table></figure>
<p>Remarks:</p>
<ul>
<li>p == 0 (Child process)</li>
<li>p == -1 (Error)</li>
<li>p &gt; 0 (Parent process)</li>
</ul>
<h3 id="Get-ID"><a href="#Get-ID" class="headerlink" title="Get ID"></a>Get ID</h3><hr>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> my_PID = getpid();</div><div class="line"><span class="keyword">int</span> my_parent_PID = getppid();</div><div class="line"><span class="keyword">int</span> my_UID = getuid();</div><div class="line"><span class="keyword">int</span> my_GID = getgid();</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Process&quot;&gt;&lt;a href=&quot;#Process&quot; class=&quot;headerlink&quot; title=&quot;Process&quot;&gt;&lt;/a&gt;Process&lt;/h2&gt;&lt;hr&gt;
&lt;h3 id=&quot;Process-program-in-execution&quot;&gt;&lt;a href=&quot;#
    
    </summary>
    
      <category term="ProgSys" scheme="http://jinshendan.github.io/categories/ProgSys/"/>
    
    
      <category term="Process" scheme="http://jinshendan.github.io/tags/Process/"/>
    
      <category term="Fork" scheme="http://jinshendan.github.io/tags/Fork/"/>
    
  </entry>
  
</feed>
