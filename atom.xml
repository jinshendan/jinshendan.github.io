<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Shendan&#39;s blog</title>
  <subtitle>申旦的博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://jinshendan.github.io/"/>
  <updated>2018-05-09T11:01:08.118Z</updated>
  <id>http://jinshendan.github.io/</id>
  
  <author>
    <name>Shendan JIN</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Topcoder - StablePairsDiv1</title>
    <link href="http://jinshendan.github.io/StablePairsDiv1.html"/>
    <id>http://jinshendan.github.io/StablePairsDiv1.html</id>
    <published>2018-05-09T10:51:33.000Z</published>
    <updated>2018-05-09T11:01:08.118Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Problem-Statement"><a href="#Problem-Statement" class="headerlink" title="Problem Statement"></a>Problem Statement</h2><p>Consider the set of integers between 1 and n, inclusive, and two positive integers c and k. You want to build an ordered list of k pairs (x1, y1), (x2, y2), … (xk, yk) such that the following conditions are met.</p>
<p>1 ≤ xi &lt; yi ≤ n for all i between 1 and k, inclusive.<br>yi &lt; xi+1 for all i between 1 and k-1, inclusive.<br>(xi+1 + yi+1) - (xi + yi) = c for all i between 1 and k-1, inclusive.<br>If a list of pairs satisfies all of the above conditions, the list is said to be stable. For any fixed n, c, and k, a stable list of k pairs is said to be maximal if its sum of elements (the sum of all 2k integers it contains) is the largest among all stable lists of k pairs.</p>
<p>For instance, consider n=5, c=4, and k=2. There are two stable lists of pairs: one is [(1, 2), (3, 4)] and the other is [(2, 3), (4, 5)]. The latter is the only maximal stable list of pairs in this example as its sum is (2+3+4+5) = 14.</p>
<p>Given n, c, and k, find one maximal stable list of pairs, and return a int[] that describes the list. Specifically, if (x1, y1), (x2, y2), …, (xk, yk) is your maximal stable list of pairs, you must return { x1, y1, x2, y2, …, xk, yk }.</p>
<p>If there are many maximal stable lists of pairs, you may return any one of them. If no stable list of pairs with the desired properties exists, you must return an empty int[].</p>
<h2 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h2><p>Class:    StablePairsDiv1<br>Method:    findMaxStablePairs<br>Parameters:    int, int, int<br>Returns:    int[]<br>Method signature:    int[] findMaxStablePairs(int n, int c, int k)<br>(be sure your method is public)</p>
<h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><ul>
<li>n will be between 1 and 100, inclusive.</li>
<li>c will be between 1 and 100, inclusive.</li>
<li>k will be between 1 and 100, inclusive.</li>
</ul>
<h2 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h2><ol>
<li><p>5<br>4<br>2<br>Returns: {2, 3, 4, 5 }<br>This example was described in the problem statement.</p>
</li>
<li><p>4<br>4<br>2<br>Returns: {1, 2, 3, 4 }</p>
</li>
<li><p>1<br>100<br>1<br>Returns: { }<br>When n=1, regardless of c and k, there is no way to build a pair.</p>
</li>
<li><p>3<br>100<br>1<br>Returns: {2, 3 }<br>With k=1 we are looking for stable lists that only contain a single pair of numbers. There are three stable lists: [(1, 2)], [(1, 3)], and [(2, 3)]. Obviously, the last one is the only maximal one in this case.</p>
</li>
<li><p>10<br>6<br>3<br>Returns: {2, 5, 6, 7, 9, 10 }</p>
</li>
<li><p>12<br>7<br>3<br>Returns: {4, 5, 6, 10, 11, 12 }</p>
</li>
</ol>
<a id="more"></a>
<h2 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h2><p>Use Dynamic Programming. Denote by f[i][x][y] the value of the maximal stable list of i pairs where the last pair is (x,y). Then f[i][x][y] = max(f[i-1][x’][y’] + x + y, for y+1 &lt;= x’ &lt;= n, y’ = x + y + c - x’), for all (i,x,y). The complexity is O(n^4).</p>
<h2 id="C-Implementation"><a href="#C-Implementation" class="headerlink" title="C++ Implementation"></a>C++ Implementation</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">class</span> StablePairsDiv1&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">	<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; findMaxStablePairs(<span class="keyword">int</span>, <span class="keyword">int</span>, <span class="keyword">int</span>);</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = (<span class="keyword">int</span>) <span class="number">1e9</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">105</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> dp[N][N][N];</div><div class="line">pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; sol[N][N][N];</div><div class="line"></div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; StablePairsDiv1::findMaxStablePairs(<span class="keyword">int</span> n, <span class="keyword">int</span> c, <span class="keyword">int</span> k)&#123;</div><div class="line">	<span class="comment">// Initialisation</span></div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N; j++)</div><div class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> p = <span class="number">0</span>; p &lt; N; p++)</div><div class="line">				dp[i][j][p] = -INF;</div><div class="line"></div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">1</span>; x &lt;= n; x++)</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> y = x+<span class="number">1</span>; y &lt;= n; y++)</div><div class="line">			dp[<span class="number">0</span>][x][y] = x + y;</div><div class="line"></div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; k<span class="number">-1</span>; i++)</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">1</span>;  x &lt;= n; x++)</div><div class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> y = x+<span class="number">1</span>; y &lt;= n; y++)&#123;</div><div class="line">				<span class="keyword">int</span> tmp = dp[i][x][y];</div><div class="line">				<span class="keyword">if</span> (tmp &lt; <span class="number">0</span>) <span class="keyword">continue</span>;</div><div class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> xx = y + <span class="number">1</span>; xx &lt;= n; xx++)&#123;</div><div class="line">					<span class="keyword">int</span> yy = x + y + c - xx;</div><div class="line">					<span class="keyword">if</span> (yy &gt; xx &amp;&amp; yy &lt;= n) &#123;</div><div class="line">						<span class="keyword">int</span> cur = tmp + xx + yy;</div><div class="line">						<span class="keyword">if</span> (cur &gt; dp[i+<span class="number">1</span>][xx][yy]) &#123;</div><div class="line">							dp[i+<span class="number">1</span>][xx][yy] = cur;</div><div class="line">							sol[i+<span class="number">1</span>][xx][yy] = make_pair(x, y);</div><div class="line">						&#125;</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">			&#125;	</div><div class="line"></div><div class="line">	<span class="keyword">int</span> ans = <span class="number">-1</span>, ans_x = <span class="number">-1</span>, ans_y = <span class="number">-1</span>;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">1</span>; x &lt;= n; x++)</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> y = x+<span class="number">1</span>; y &lt;= n; y++)</div><div class="line">			<span class="keyword">if</span> (dp[k<span class="number">-1</span>][x][y] &gt; ans) &#123;</div><div class="line">				ans = dp[k<span class="number">-1</span>][x][y];</div><div class="line">				ans_x = x;</div><div class="line">				ans_y = y;</div><div class="line">			&#125;</div><div class="line">	<span class="keyword">if</span> (ans == <span class="number">-1</span>) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = k - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)&#123;</div><div class="line">		v.push_back(ans_y);</div><div class="line">		v.push_back(ans_x);</div><div class="line">		<span class="keyword">if</span> (i == <span class="number">0</span>) <span class="keyword">break</span>;</div><div class="line">		<span class="keyword">int</span> tx = sol[i][ans_x][ans_y].first;</div><div class="line">		<span class="keyword">int</span> ty = sol[i][ans_x][ans_y].second;</div><div class="line">		ans_x = tx;</div><div class="line">		ans_y = ty;</div><div class="line">	&#125;</div><div class="line">	reverse(v.begin(), v.end());</div><div class="line">	<span class="keyword">return</span> v;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Problem-Statement&quot;&gt;&lt;a href=&quot;#Problem-Statement&quot; class=&quot;headerlink&quot; title=&quot;Problem Statement&quot;&gt;&lt;/a&gt;Problem Statement&lt;/h2&gt;&lt;p&gt;Consider the set of integers between 1 and n, inclusive, and two positive integers c and k. You want to build an ordered list of k pairs (x1, y1), (x2, y2), … (xk, yk) such that the following conditions are met.&lt;/p&gt;
&lt;p&gt;1 ≤ xi &amp;lt; yi ≤ n for all i between 1 and k, inclusive.&lt;br&gt;yi &amp;lt; xi+1 for all i between 1 and k-1, inclusive.&lt;br&gt;(xi+1 + yi+1) - (xi + yi) = c for all i between 1 and k-1, inclusive.&lt;br&gt;If a list of pairs satisfies all of the above conditions, the list is said to be stable. For any fixed n, c, and k, a stable list of k pairs is said to be maximal if its sum of elements (the sum of all 2k integers it contains) is the largest among all stable lists of k pairs.&lt;/p&gt;
&lt;p&gt;For instance, consider n=5, c=4, and k=2. There are two stable lists of pairs: one is [(1, 2), (3, 4)] and the other is [(2, 3), (4, 5)]. The latter is the only maximal stable list of pairs in this example as its sum is (2+3+4+5) = 14.&lt;/p&gt;
&lt;p&gt;Given n, c, and k, find one maximal stable list of pairs, and return a int[] that describes the list. Specifically, if (x1, y1), (x2, y2), …, (xk, yk) is your maximal stable list of pairs, you must return { x1, y1, x2, y2, …, xk, yk }.&lt;/p&gt;
&lt;p&gt;If there are many maximal stable lists of pairs, you may return any one of them. If no stable list of pairs with the desired properties exists, you must return an empty int[].&lt;/p&gt;
&lt;h2 id=&quot;Definition&quot;&gt;&lt;a href=&quot;#Definition&quot; class=&quot;headerlink&quot; title=&quot;Definition&quot;&gt;&lt;/a&gt;Definition&lt;/h2&gt;&lt;p&gt;Class:    StablePairsDiv1&lt;br&gt;Method:    findMaxStablePairs&lt;br&gt;Parameters:    int, int, int&lt;br&gt;Returns:    int[]&lt;br&gt;Method signature:    int[] findMaxStablePairs(int n, int c, int k)&lt;br&gt;(be sure your method is public)&lt;/p&gt;
&lt;h2 id=&quot;Constraints&quot;&gt;&lt;a href=&quot;#Constraints&quot; class=&quot;headerlink&quot; title=&quot;Constraints&quot;&gt;&lt;/a&gt;Constraints&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;n will be between 1 and 100, inclusive.&lt;/li&gt;
&lt;li&gt;c will be between 1 and 100, inclusive.&lt;/li&gt;
&lt;li&gt;k will be between 1 and 100, inclusive.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Examples&quot;&gt;&lt;a href=&quot;#Examples&quot; class=&quot;headerlink&quot; title=&quot;Examples&quot;&gt;&lt;/a&gt;Examples&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;5&lt;br&gt;4&lt;br&gt;2&lt;br&gt;Returns: {2, 3, 4, 5 }&lt;br&gt;This example was described in the problem statement.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;4&lt;br&gt;4&lt;br&gt;2&lt;br&gt;Returns: {1, 2, 3, 4 }&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;1&lt;br&gt;100&lt;br&gt;1&lt;br&gt;Returns: { }&lt;br&gt;When n=1, regardless of c and k, there is no way to build a pair.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;3&lt;br&gt;100&lt;br&gt;1&lt;br&gt;Returns: {2, 3 }&lt;br&gt;With k=1 we are looking for stable lists that only contain a single pair of numbers. There are three stable lists: [(1, 2)], [(1, 3)], and [(2, 3)]. Obviously, the last one is the only maximal one in this case.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;10&lt;br&gt;6&lt;br&gt;3&lt;br&gt;Returns: {2, 5, 6, 7, 9, 10 }&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;12&lt;br&gt;7&lt;br&gt;3&lt;br&gt;Returns: {4, 5, 6, 10, 11, 12 }&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Topcoder" scheme="http://jinshendan.github.io/categories/Topcoder/"/>
    
    
      <category term="DP" scheme="http://jinshendan.github.io/tags/DP/"/>
    
  </entry>
  
  <entry>
    <title>Topcoder - LineOff</title>
    <link href="http://jinshendan.github.io/LineOff.html"/>
    <id>http://jinshendan.github.io/LineOff.html</id>
    <published>2018-05-09T09:16:54.000Z</published>
    <updated>2018-05-09T10:54:38.777Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Problem-Statement"><a href="#Problem-Statement" class="headerlink" title="Problem Statement"></a>Problem Statement</h2><p>You are given a set of colored points on a straight line.</p>
<p>You play a game with these points. The game is a sequence of moves. In each move you have to erase two points that are adjacent and share the same color. (Two points are adjacent if there is no other point between them. Distances don’t matter.)</p>
<p>You are given the String points. Each character of points describes the color of one point, in the order in which they are arranged on the line at the beginning of the game. (Different letters represent different colors.) Compute and return the maximum number of moves you can make.</p>
<h2 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h2><p>Class:    LineOff<br>Method:    movesToDo<br>Parameters:    String<br>Returns:    int<br>Method signature:    int movesToDo(String points)<br>(be sure your method is public)</p>
<h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><ul>
<li>points will contain between 1 and 50 characters, inclusive.</li>
<li>Each character in points will be a lowercase English letter (‘a’-‘z’).</li>
</ul>
<h2 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h2><ol>
<li><p>“abba”<br>Returns: 2<br>The only valid first move is to erase the two points of color ‘b’. After that move the points of color ‘a’ are now adjacent and they can be removed in our second move.</p>
</li>
<li><p>“zwwwzffw”<br>Returns: 2<br>You can remove two ‘w’ points and two ‘f’ points with your first two moves. After that the remaining points on the line will be arranged as follows: “zwzw”. In this situation you don’t have any adjacent points that share the same color, so there are no more moves.</p>
</li>
<li><p>“rrrrrrr”<br>Returns: 3<br>With an odd number of points, at least one of them will have no pair.</p>
</li>
<li><p>“dfghj”<br>Returns: 0<br>All colors are different so no points can be removed.</p>
</li>
<li><p>“wasitacarooracatisaw”<br>Returns: 10</p>
</li>
</ol>
<a id="more"></a>
<h2 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h2><ol>
<li>Consider this problem as an Online Problem, the letters arrive online one after another from left to right. An optimal solution can be maintained by a “Stack” structure, in which we stock the current optimal remained letters. Because whenever a new letter arrives, it could only impact the last letter. </li>
</ol>
<h2 id="C-Implementation"><a href="#C-Implementation" class="headerlink" title="C++ Implementation"></a>C++ Implementation</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"> </div><div class="line"><span class="keyword">class</span> LineOff &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">movesToDo</span><span class="params">(<span class="built_in">string</span>)</span></span>;</div><div class="line">&#125;;</div><div class="line"> </div><div class="line"><span class="keyword">int</span> LineOff::movesToDo(<span class="built_in">string</span> points) &#123;</div><div class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">char</span>&gt; s;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> c : points) &#123;</div><div class="line">    <span class="keyword">if</span> (!s.empty() &amp;&amp; c == s.top()) &#123;</div><div class="line">        s.pop();</div><div class="line">        ans++;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        s.push(c);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> ans;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Problem-Statement&quot;&gt;&lt;a href=&quot;#Problem-Statement&quot; class=&quot;headerlink&quot; title=&quot;Problem Statement&quot;&gt;&lt;/a&gt;Problem Statement&lt;/h2&gt;&lt;p&gt;You are given a set of colored points on a straight line.&lt;/p&gt;
&lt;p&gt;You play a game with these points. The game is a sequence of moves. In each move you have to erase two points that are adjacent and share the same color. (Two points are adjacent if there is no other point between them. Distances don’t matter.)&lt;/p&gt;
&lt;p&gt;You are given the String points. Each character of points describes the color of one point, in the order in which they are arranged on the line at the beginning of the game. (Different letters represent different colors.) Compute and return the maximum number of moves you can make.&lt;/p&gt;
&lt;h2 id=&quot;Definition&quot;&gt;&lt;a href=&quot;#Definition&quot; class=&quot;headerlink&quot; title=&quot;Definition&quot;&gt;&lt;/a&gt;Definition&lt;/h2&gt;&lt;p&gt;Class:    LineOff&lt;br&gt;Method:    movesToDo&lt;br&gt;Parameters:    String&lt;br&gt;Returns:    int&lt;br&gt;Method signature:    int movesToDo(String points)&lt;br&gt;(be sure your method is public)&lt;/p&gt;
&lt;h2 id=&quot;Constraints&quot;&gt;&lt;a href=&quot;#Constraints&quot; class=&quot;headerlink&quot; title=&quot;Constraints&quot;&gt;&lt;/a&gt;Constraints&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;points will contain between 1 and 50 characters, inclusive.&lt;/li&gt;
&lt;li&gt;Each character in points will be a lowercase English letter (‘a’-‘z’).&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Examples&quot;&gt;&lt;a href=&quot;#Examples&quot; class=&quot;headerlink&quot; title=&quot;Examples&quot;&gt;&lt;/a&gt;Examples&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;“abba”&lt;br&gt;Returns: 2&lt;br&gt;The only valid first move is to erase the two points of color ‘b’. After that move the points of color ‘a’ are now adjacent and they can be removed in our second move.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;“zwwwzffw”&lt;br&gt;Returns: 2&lt;br&gt;You can remove two ‘w’ points and two ‘f’ points with your first two moves. After that the remaining points on the line will be arranged as follows: “zwzw”. In this situation you don’t have any adjacent points that share the same color, so there are no more moves.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;“rrrrrrr”&lt;br&gt;Returns: 3&lt;br&gt;With an odd number of points, at least one of them will have no pair.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;“dfghj”&lt;br&gt;Returns: 0&lt;br&gt;All colors are different so no points can be removed.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;“wasitacarooracatisaw”&lt;br&gt;Returns: 10&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Topcoder" scheme="http://jinshendan.github.io/categories/Topcoder/"/>
    
    
      <category term="Stack" scheme="http://jinshendan.github.io/tags/Stack/"/>
    
  </entry>
  
  <entry>
    <title>Google Tensorflow Tutorial 学习笔记(1) -- 安装</title>
    <link href="http://jinshendan.github.io/Learning-Tensorflow.html"/>
    <id>http://jinshendan.github.io/Learning-Tensorflow.html</id>
    <published>2018-03-05T21:51:13.000Z</published>
    <updated>2018-03-05T22:23:57.290Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装Tensorflow"><a href="#安装Tensorflow" class="headerlink" title="安装Tensorflow"></a>安装Tensorflow</h2><p>1). 安装Virtualenv<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ sudo easy_install pip</div><div class="line">$ pip install --upgrade virtualenv</div></pre></td></tr></table></figure></p>
<p>2). 建立virtualenv<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">virtualenv --system-site-packages -p python3 ~/tensorflow</div></pre></td></tr></table></figure></p>
<p>3). 激活virtualenv<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> ~/tensorflow</div><div class="line">$ <span class="built_in">source</span> ./bin/activate</div></pre></td></tr></table></figure></p>
<p>4). 下载tensorflow<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ pip3 install --upgrade tensorflow</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;安装Tensorflow&quot;&gt;&lt;a href=&quot;#安装Tensorflow&quot; class=&quot;headerlink&quot; title=&quot;安装Tensorflow&quot;&gt;&lt;/a&gt;安装Tensorflow&lt;/h2&gt;&lt;p&gt;1). 安装Virtualenv&lt;br&gt;&lt;figure cl
    
    </summary>
    
      <category term="ML" scheme="http://jinshendan.github.io/categories/ML/"/>
    
    
      <category term="Tensorflow" scheme="http://jinshendan.github.io/tags/Tensorflow/"/>
    
  </entry>
  
  <entry>
    <title>Codejam 2017 Qualification Bathroom Stalls</title>
    <link href="http://jinshendan.github.io/Codejam-2017-Qualification-Bathroom-Stalls.html"/>
    <id>http://jinshendan.github.io/Codejam-2017-Qualification-Bathroom-Stalls.html</id>
    <published>2018-03-04T21:53:04.000Z</published>
    <updated>2018-03-04T22:00:06.143Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><p><a href="https://code.google.com/codejam/contest/3264486/dashboard#s=p2&amp;a=2" target="_blank" rel="external">Here</a>.</p>
<a id="more"></a>
<h2 id="Code-in-C"><a href="#Code-in-C" class="headerlink" title="Code in C++"></a>Code in C++</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="keyword">int</span> T;</div><div class="line">	<span class="built_in">cin</span> &gt;&gt; T;</div><div class="line">	FOR(kase, <span class="number">0</span>, T)&#123;</div><div class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"Case #"</span> &lt;&lt; kase + <span class="number">1</span> &lt;&lt; <span class="string">": "</span>;</div><div class="line">		ll n, k;</div><div class="line">		<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k;</div><div class="line">		<span class="built_in">cerr</span> &lt;&lt; kase &lt;&lt; <span class="string">" "</span> &lt;&lt; n &lt;&lt; <span class="string">" "</span> &lt;&lt; k &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">		<span class="built_in">map</span>&lt;ll, ll&gt; s;</div><div class="line">		s[n] = <span class="number">1L</span>L;</div><div class="line"> 		<span class="keyword">while</span>(k &gt; <span class="number">0</span>)&#123;</div><div class="line"> 			<span class="keyword">auto</span> p = *(--s.end());</div><div class="line"> 			s.erase(--s.end());</div><div class="line">			ll len = p.first;</div><div class="line">			ll cnt = p.second;</div><div class="line">			<span class="keyword">if</span> (cnt &gt;= k)&#123;</div><div class="line">				<span class="built_in">cout</span> &lt;&lt; len / <span class="number">2</span> &lt;&lt; <span class="string">" "</span> &lt;&lt; (len - <span class="number">1</span>) / <span class="number">2</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			&#125;</div><div class="line">			k -= cnt;</div><div class="line">			s[len/<span class="number">2</span>] += cnt;</div><div class="line">			s[(len<span class="number">-1</span>)/<span class="number">2</span>] += cnt;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;Problem&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://code.google.com/codejam/contest/3264486/dashboard#s=p2&amp;amp;a=2&quot;&gt;Here&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
      <category term="Codejam" scheme="http://jinshendan.github.io/categories/Codejam/"/>
    
    
      <category term="map" scheme="http://jinshendan.github.io/tags/map/"/>
    
  </entry>
  
  <entry>
    <title>Codejam 2017 Qualification Tidy Numbers</title>
    <link href="http://jinshendan.github.io/Codejam-2017-Qualification-Tidy-Numbers.html"/>
    <id>http://jinshendan.github.io/Codejam-2017-Qualification-Tidy-Numbers.html</id>
    <published>2018-03-04T18:31:32.000Z</published>
    <updated>2018-03-04T18:45:03.602Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><p><a href="https://code.google.com/codejam/contest/3264486/dashboard#s=p1&amp;a=0" target="_blank" rel="external">Here</a>.</p>
<h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p>求不超过N的最大的非递减整数，N 最大不超过 10^18.</p>
<a id="more"></a>
<h2 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h2><ul>
<li>N 长度最大为18，可以贪心枚举每个位置可能放置的数字。</li>
</ul>
<h2 id="Code-in-C"><a href="#Code-in-C" class="headerlink" title="Code in C++"></a>Code in C++</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="keyword">int</span> T;</div><div class="line">	<span class="built_in">cin</span> &gt;&gt; T;</div><div class="line">	<span class="built_in">string</span> s;</div><div class="line">	FOR(kase, <span class="number">0</span>, T)&#123;</div><div class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"Case #"</span> &lt;&lt; kase+<span class="number">1</span> &lt;&lt; <span class="string">": "</span>;</div><div class="line">		<span class="built_in">cin</span> &gt;&gt; s;</div><div class="line">		<span class="built_in">string</span> t;</div><div class="line">		FOR(i, <span class="number">0</span>, s.length())&#123;</div><div class="line">			<span class="keyword">int</span> bound = (i == <span class="number">0</span> ? <span class="number">0</span> : t.back() - <span class="string">'0'</span>);</div><div class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> d = <span class="number">9</span>; d &gt;= bound; d--)&#123;</div><div class="line">				<span class="built_in">string</span> tt = t;</div><div class="line">				FOR(j, i, s.length())</div><div class="line">					tt += (<span class="keyword">char</span>)(<span class="string">'0'</span> + d);</div><div class="line">				<span class="keyword">if</span> (tt &lt;= s)&#123;</div><div class="line">					t += (<span class="keyword">char</span>)(<span class="string">'0'</span> + d);</div><div class="line">					<span class="keyword">break</span>;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">while</span> (t[<span class="number">0</span>] == <span class="string">'0'</span>)&#123;</div><div class="line">			t = t.substr(<span class="number">1</span>);</div><div class="line">		&#125;</div><div class="line">		<span class="built_in">cout</span> &lt;&lt; t &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;Problem&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://code.google.com/codejam/contest/3264486/dashboard#s=p1&amp;amp;a=0&quot;&gt;Here&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;题目大意&quot;&gt;&lt;a href=&quot;#题目大意&quot; class=&quot;headerlink&quot; title=&quot;题目大意&quot;&gt;&lt;/a&gt;题目大意&lt;/h2&gt;&lt;p&gt;求不超过N的最大的非递减整数，N 最大不超过 10^18.&lt;/p&gt;
    
    </summary>
    
      <category term="Codejam" scheme="http://jinshendan.github.io/categories/Codejam/"/>
    
    
      <category term="Brute force" scheme="http://jinshendan.github.io/tags/Brute-force/"/>
    
  </entry>
  
  <entry>
    <title>Codejam 2017 Qualification Oversized Pancake Flipper</title>
    <link href="http://jinshendan.github.io/Codejam-2017-Qualification-Oversized-Pancake-Flipper.html"/>
    <id>http://jinshendan.github.io/Codejam-2017-Qualification-Oversized-Pancake-Flipper.html</id>
    <published>2018-03-04T18:11:36.000Z</published>
    <updated>2018-03-04T18:46:18.706Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><p><a href="https://code.google.com/codejam/contest/3264486/dashboard" target="_blank" rel="external">Here</a>.</p>
<h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p>桌面上有S (S &lt;= 1000) 枚硬币排成一行，每次可以翻转连续的K枚硬币（只改变正反状态，不改变相对顺序），求从一个初始状态到另一个状态的最少翻转次数。<br><a id="more"></a></p>
<h2 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h2><ul>
<li>pancake的正反状态，仅由初始状态和反转次数决定</li>
</ul>
<h2 id="Code-in-C"><a href="#Code-in-C" class="headerlink" title="Code in C++"></a>Code in C++</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="keyword">int</span> T;</div><div class="line">	<span class="built_in">string</span> s;</div><div class="line">	<span class="keyword">int</span> K;</div><div class="line">	<span class="keyword">int</span> ans;</div><div class="line">	<span class="built_in">cin</span> &gt;&gt; T;</div><div class="line">	FOR(kase, <span class="number">0</span>, T)&#123;</div><div class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"Case #"</span> &lt;&lt; kase + <span class="number">1</span> &lt;&lt; <span class="string">": "</span>;</div><div class="line">		<span class="built_in">cin</span> &gt;&gt; s &gt;&gt; K;</div><div class="line">		ans = <span class="number">0</span>;</div><div class="line">		FOR(i, <span class="number">0</span>, s.length() - K + <span class="number">1</span>) &#123;</div><div class="line">			<span class="keyword">if</span> (s[i] == <span class="string">'-'</span>)&#123;</div><div class="line">				ans ++;</div><div class="line">				FOR(j, i, i+K)</div><div class="line">					s[j] = <span class="string">'-'</span> + <span class="string">'+'</span> - s[j];</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (s != <span class="built_in">string</span>(s.length(), <span class="string">'+'</span>))</div><div class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">"IMPOSSIBLE"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">		<span class="keyword">else</span></div><div class="line">		 	<span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;Problem&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://code.google.com/codejam/contest/3264486/dashboard&quot;&gt;Here&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;题目大意&quot;&gt;&lt;a href=&quot;#题目大意&quot; class=&quot;headerlink&quot; title=&quot;题目大意&quot;&gt;&lt;/a&gt;题目大意&lt;/h2&gt;&lt;p&gt;桌面上有S (S &amp;lt;= 1000) 枚硬币排成一行，每次可以翻转连续的K枚硬币（只改变正反状态，不改变相对顺序），求从一个初始状态到另一个状态的最少翻转次数。&lt;br&gt;
    
    </summary>
    
      <category term="Codejam" scheme="http://jinshendan.github.io/categories/Codejam/"/>
    
    
      <category term="Ad Hoc" scheme="http://jinshendan.github.io/tags/Ad-Hoc/"/>
    
  </entry>
  
  <entry>
    <title>The 3n + 1 problem - UVA 100</title>
    <link href="http://jinshendan.github.io/The-3n1-problem.html"/>
    <id>http://jinshendan.github.io/The-3n1-problem.html</id>
    <published>2018-03-02T15:47:47.000Z</published>
    <updated>2018-03-02T17:22:33.113Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><p><a href="https://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid=8&amp;category=3&amp;page=show_problem&amp;problem=36" target="_blank" rel="external">Here</a>.</p>
<a id="more"></a>
<h2 id="Code-in-C"><a href="#Code-in-C" class="headerlink" title="Code in C++"></a>Code in C++</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> s, t;</div><div class="line"><span class="keyword">int</span> ans;</div><div class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; a;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">	<span class="keyword">int</span> step = <span class="number">1</span>;</div><div class="line">	<span class="keyword">while</span> (x != <span class="number">1</span>)&#123;</div><div class="line">		step ++;</div><div class="line">		<span class="keyword">if</span> (x % <span class="number">2</span> == <span class="number">1</span>)</div><div class="line">			x = <span class="number">3</span>*x + <span class="number">1</span>;</div><div class="line">		<span class="keyword">else</span> x = x / <span class="number">2</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> step;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; s &gt;&gt; t)&#123;</div><div class="line">		<span class="keyword">int</span> u = min(s,t);</div><div class="line">		<span class="keyword">int</span> v = max(s,t);</div><div class="line">		ans = <span class="number">1</span>;</div><div class="line">		FOR(i, u, v+<span class="number">1</span>)</div><div class="line">			<span class="keyword">if</span> (a.find(i) != a.end())</div><div class="line">				ans = max(ans, a[i]);</div><div class="line">			<span class="keyword">else</span> &#123;</div><div class="line">				a[i] = calc(i);</div><div class="line">				ans = max(ans, a[i]);</div><div class="line">			&#125;</div><div class="line">		<span class="built_in">cout</span> &lt;&lt; s &lt;&lt; <span class="string">" "</span> &lt;&lt; t &lt;&lt; <span class="string">" "</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;Problem&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;amp;Itemid=8&amp;amp;category=3&amp;amp;page=show_problem&amp;amp;problem=36&quot;&gt;Here&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
      <category term="UVA" scheme="http://jinshendan.github.io/categories/UVA/"/>
    
    
      <category term="Ad Hoc" scheme="http://jinshendan.github.io/tags/Ad-Hoc/"/>
    
  </entry>
  
  <entry>
    <title>再见, 2017</title>
    <link href="http://jinshendan.github.io/2017-2018.html"/>
    <id>http://jinshendan.github.io/2017-2018.html</id>
    <published>2017-12-31T20:39:50.000Z</published>
    <updated>2017-12-31T20:44:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>2017年的最后一天</p>
<p>莫名奇妙的感冒</p>
<p>平平淡淡的迎接2018</p>
<p>祝你 永远开心</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2017年的最后一天&lt;/p&gt;
&lt;p&gt;莫名奇妙的感冒&lt;/p&gt;
&lt;p&gt;平平淡淡的迎接2018&lt;/p&gt;
&lt;p&gt;祝你 永远开心&lt;/p&gt;

    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Regular Expression Matching - Leetcode A10</title>
    <link href="http://jinshendan.github.io/Regualr-Expression-Matching.html"/>
    <id>http://jinshendan.github.io/Regualr-Expression-Matching.html</id>
    <published>2017-12-23T20:45:13.000Z</published>
    <updated>2017-12-23T20:52:13.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><p><a href="https://leetcode.com/problems/regular-expression-matching/description/" target="_blank" rel="external">Problem description</a></p>
<p>Implement regular expression matching with support for ‘.’ and ‘*’.</p>
<p>‘.’ Matches any single character.<br>‘*’ Matches zero or more of the preceding element.</p>
<p>The matching should cover the entire input string (not partial).</p>
<p>The function prototype should be:<br>bool isMatch(const char <em>s, const char </em>p)</p>
<p>Some examples:<br>isMatch(“aa”,”a”) → false<br>isMatch(“aa”,”aa”) → true<br>isMatch(“aaa”,”aa”) → false<br>isMatch(“aa”, “a<em>“) → true<br>isMatch(“aa”, “.</em>“) → true<br>isMatch(“ab”, “.<em>“) → true<br>isMatch(“aab”, “c</em>a*b”) → true</p>
<a id="more"></a>
<h2 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h2><p>DP</p>
<ul>
<li>dp[i, j] = true if s[i:] == p[j:]</li>
<li>dp[i, j] = dp[i, j+2] or first_matched and dp[i+1, j] if j+1 &lt; len(p) and p[j+1] == ‘*’.</li>
<li>dp[i, j] = first_matched and dp[i+1, j+1], otherwise </li>
<li>first_matched = p[j] in {s[i], ‘.’}<h2 id="Python-Implementation"><a href="#Python-Implementation" class="headerlink" title="Python Implementation"></a>Python Implementation</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isMatch</span><span class="params">(self, s, p)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type s: str</div><div class="line">        :type p: str</div><div class="line">        :rtype: bool</div><div class="line">        """</div><div class="line">        </div><div class="line">        cache = &#123;&#125;</div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">dp</span><span class="params">(i, j)</span>:</span></div><div class="line">        	<span class="keyword">if</span> (i, j) <span class="keyword">not</span> <span class="keyword">in</span> cache:</div><div class="line">        		<span class="keyword">if</span> (j == len(p)):</div><div class="line">        			ans = (i == len(s))</div><div class="line">        		<span class="keyword">else</span>:</div><div class="line">        			first = i &lt; len(s) <span class="keyword">and</span> p[j] <span class="keyword">in</span> &#123;s[i], <span class="string">'.'</span>&#125;</div><div class="line">        			<span class="keyword">if</span> j + <span class="number">1</span> &lt; len(p) <span class="keyword">and</span> p[j + <span class="number">1</span>] == <span class="string">'*'</span>:</div><div class="line">        				ans = dp(i, j + <span class="number">2</span>) <span class="keyword">or</span> first <span class="keyword">and</span> dp(i+<span class="number">1</span>, j)</div><div class="line">        			<span class="keyword">else</span>:</div><div class="line">        				ans = first <span class="keyword">and</span> dp(i+<span class="number">1</span>, j+<span class="number">1</span>)</div><div class="line">        		cache[(i,j)] = ans</div><div class="line">        	<span class="keyword">return</span> cache[(i,j)]</div><div class="line">        <span class="keyword">return</span> dp(<span class="number">0</span>, <span class="number">0</span>)</div></pre></td></tr></table></figure></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;Problem&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/regular-expression-matching/description/&quot;&gt;Problem description&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Implement regular expression matching with support for ‘.’ and ‘*’.&lt;/p&gt;
&lt;p&gt;‘.’ Matches any single character.&lt;br&gt;‘*’ Matches zero or more of the preceding element.&lt;/p&gt;
&lt;p&gt;The matching should cover the entire input string (not partial).&lt;/p&gt;
&lt;p&gt;The function prototype should be:&lt;br&gt;bool isMatch(const char &lt;em&gt;s, const char &lt;/em&gt;p)&lt;/p&gt;
&lt;p&gt;Some examples:&lt;br&gt;isMatch(“aa”,”a”) → false&lt;br&gt;isMatch(“aa”,”aa”) → true&lt;br&gt;isMatch(“aaa”,”aa”) → false&lt;br&gt;isMatch(“aa”, “a&lt;em&gt;“) → true&lt;br&gt;isMatch(“aa”, “.&lt;/em&gt;“) → true&lt;br&gt;isMatch(“ab”, “.&lt;em&gt;“) → true&lt;br&gt;isMatch(“aab”, “c&lt;/em&gt;a*b”) → true&lt;/p&gt;
    
    </summary>
    
      <category term="Leetcode" scheme="http://jinshendan.github.io/categories/Leetcode/"/>
    
    
      <category term="DP" scheme="http://jinshendan.github.io/tags/DP/"/>
    
  </entry>
  
  <entry>
    <title>Palindrome Number - Leetcode A9</title>
    <link href="http://jinshendan.github.io/Palindrome-Number.html"/>
    <id>http://jinshendan.github.io/Palindrome-Number.html</id>
    <published>2017-12-21T21:11:36.000Z</published>
    <updated>2017-12-21T21:14:21.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><p><a href="https://leetcode.com/problems/palindrome-number/description/" target="_blank" rel="external">Problem description</a></p>
<p>Determine whether an integer is a palindrome. Do this without extra space.</p>
<a id="more"></a>
<h2 id="Python-Implementation"><a href="#Python-Implementation" class="headerlink" title="Python Implementation"></a>Python Implementation</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">isPalindrome</span><span class="params">(self, x)</span>:</span></div><div class="line">		<span class="string">"""</span></div><div class="line">		:type x: int</div><div class="line">		:rtype: bool</div><div class="line">		"""</div><div class="line"></div><div class="line">		<span class="keyword">if</span> x &lt; <span class="number">0</span>:</div><div class="line">			<span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">		y = <span class="number">0</span></div><div class="line">		t = x</div><div class="line">		<span class="keyword">while</span> t &gt; <span class="number">0</span>:</div><div class="line">			y = y * <span class="number">10</span> + (t % <span class="number">10</span>)</div><div class="line">			t = t // <span class="number">10</span></div><div class="line">		print(y)</div><div class="line">		<span class="keyword">return</span> x == y</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;Problem&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/palindrome-number/description/&quot;&gt;Problem description&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Determine whether an integer is a palindrome. Do this without extra space.&lt;/p&gt;
    
    </summary>
    
      <category term="Leetcode" scheme="http://jinshendan.github.io/categories/Leetcode/"/>
    
    
  </entry>
  
  <entry>
    <title>Atoi - Leetcode A8</title>
    <link href="http://jinshendan.github.io/Atoi.html"/>
    <id>http://jinshendan.github.io/Atoi.html</id>
    <published>2017-12-21T14:37:51.000Z</published>
    <updated>2017-12-21T14:42:21.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><p><a href="https://leetcode.com/problems/string-to-integer-atoi/description/" target="_blank" rel="external">Problem description</a></p>
<p>Implement atoi to convert a string to an integer.</p>
<p>Requirements for atoi:<br>The function first discards as many whitespace characters as necessary until the first non-whitespace character is found. Then, starting from this character, takes an optional initial plus or minus sign followed by as many numerical digits as possible, and interprets them as a numerical value.</p>
<p>The string can contain additional characters after those that form the integral number, which are ignored and have no effect on the behavior of this function.</p>
<p>If the first sequence of non-whitespace characters in str is not a valid integral number, or if no such sequence exists because either str is empty or it contains only whitespace characters, no conversion is performed.</p>
<p>If no valid conversion could be performed, a zero value is returned. If the correct value is out of the range of representable values, INT_MAX (2147483647) or INT_MIN (-2147483648) is returned.</p>
<a id="more"></a>
<h2 id="Python-Implementation"><a href="#Python-Implementation" class="headerlink" title="Python Implementation"></a>Python Implementation</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">myAtoi</span><span class="params">(self, str)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type str: str</div><div class="line">        :rtype: int</div><div class="line">        """</div><div class="line">        <span class="comment"># discard whitespace</span></div><div class="line">        str = str.strip()</div><div class="line">        </div><div class="line">        sign = <span class="number">1</span></div><div class="line">        i = <span class="number">0</span></div><div class="line">        <span class="keyword">if</span> (str == <span class="string">""</span>):</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span></div><div class="line">            </div><div class="line">        <span class="keyword">if</span> str[<span class="number">0</span>] == <span class="string">'+'</span>:</div><div class="line">            sign = <span class="number">1</span></div><div class="line">            i += <span class="number">1</span></div><div class="line">        <span class="keyword">elif</span> str[<span class="number">0</span>] == <span class="string">'-'</span>:</div><div class="line">            sign = <span class="number">-1</span></div><div class="line">            i += <span class="number">1</span></div><div class="line">        </div><div class="line">        ans = <span class="number">0</span></div><div class="line">        <span class="keyword">while</span> i &lt; len(str) <span class="keyword">and</span> str[i].isdigit():</div><div class="line">            ans = ans * <span class="number">10</span> + int(str[i])</div><div class="line">            i += <span class="number">1</span></div><div class="line"></div><div class="line">        ans = ans * sign</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (i == <span class="number">0</span> <span class="keyword">and</span> str[<span class="number">0</span>] <span class="keyword">not</span> <span class="keyword">in</span> [<span class="string">'+'</span>, <span class="string">'-'</span>]):</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span></div><div class="line">        <span class="keyword">if</span> ans &gt; (<span class="number">1</span>&lt;&lt;<span class="number">31</span>)<span class="number">-1</span>:</div><div class="line">            <span class="keyword">return</span> (<span class="number">1</span>&lt;&lt;<span class="number">31</span>)<span class="number">-1</span></div><div class="line">        <span class="keyword">if</span> ans &lt; -(<span class="number">1</span>&lt;&lt;<span class="number">31</span>):</div><div class="line">            <span class="keyword">return</span> -(<span class="number">1</span>&lt;&lt;<span class="number">31</span>)</div><div class="line"></div><div class="line">        <span class="keyword">return</span> ans</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;Problem&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/string-to-integer-atoi/description/&quot;&gt;Problem description&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Implement atoi to convert a string to an integer.&lt;/p&gt;
&lt;p&gt;Requirements for atoi:&lt;br&gt;The function first discards as many whitespace characters as necessary until the first non-whitespace character is found. Then, starting from this character, takes an optional initial plus or minus sign followed by as many numerical digits as possible, and interprets them as a numerical value.&lt;/p&gt;
&lt;p&gt;The string can contain additional characters after those that form the integral number, which are ignored and have no effect on the behavior of this function.&lt;/p&gt;
&lt;p&gt;If the first sequence of non-whitespace characters in str is not a valid integral number, or if no such sequence exists because either str is empty or it contains only whitespace characters, no conversion is performed.&lt;/p&gt;
&lt;p&gt;If no valid conversion could be performed, a zero value is returned. If the correct value is out of the range of representable values, INT_MAX (2147483647) or INT_MIN (-2147483648) is returned.&lt;/p&gt;
    
    </summary>
    
      <category term="Leetcode" scheme="http://jinshendan.github.io/categories/Leetcode/"/>
    
    
      <category term="string" scheme="http://jinshendan.github.io/tags/string/"/>
    
  </entry>
  
  <entry>
    <title>Reverse Integer - Leetcode A7</title>
    <link href="http://jinshendan.github.io/Reverse-Integer.html"/>
    <id>http://jinshendan.github.io/Reverse-Integer.html</id>
    <published>2017-12-20T22:05:19.000Z</published>
    <updated>2017-12-21T14:43:30.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><p><a href="https://leetcode.com/problems/reverse-integer/description/" target="_blank" rel="external">Problem description</a></p>
<p>Given a 32-bit signed integer, reverse digits of an integer.</p>
<p>Example 1:</p>
<p>Input: 123<br>Output:  321<br>Example 2:</p>
<p>Input: -123<br>Output: -321<br>Example 3:</p>
<p>Input: 120<br>Output: 21<br>Note:<br>Assume we are dealing with an environment which could only hold integers within the 32-bit signed integer range. For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.</p>
<a id="more"></a>
<h2 id="Python-“C-style”-Implementation"><a href="#Python-“C-style”-Implementation" class="headerlink" title="Python “C-style” Implementation"></a>Python “C-style” Implementation</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">reverse</span><span class="params">(self, x)</span>:</span></div><div class="line">		<span class="string">"""</span></div><div class="line">		:type x: int</div><div class="line">		:rtype: int</div><div class="line">		"""</div><div class="line"></div><div class="line">		sign = <span class="number">1</span></div><div class="line">		<span class="keyword">if</span> (x &lt; <span class="number">0</span>):</div><div class="line">			sign = <span class="number">-1</span></div><div class="line">			x = -x</div><div class="line"></div><div class="line">		ans = <span class="number">0</span></div><div class="line">		<span class="keyword">while</span> (x &gt; <span class="number">0</span>):</div><div class="line">			ans = ans * <span class="number">10</span> + x % <span class="number">10</span></div><div class="line">			x = x // <span class="number">10</span></div><div class="line">			<span class="keyword">if</span> ans*sign &gt; ((<span class="number">1</span> &lt;&lt; <span class="number">31</span>) - <span class="number">1</span>) <span class="keyword">or</span> ans*sign &lt; -(<span class="number">1</span> &lt;&lt; <span class="number">31</span>):</div><div class="line">				ans = <span class="number">0</span></div><div class="line">				<span class="keyword">break</span></div><div class="line"></div><div class="line">		<span class="keyword">return</span> ans*sign</div></pre></td></tr></table></figure>
<h2 id="Python-Implementation"><a href="#Python-Implementation" class="headerlink" title="Python Implementation"></a>Python Implementation</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">reverse</span><span class="params">(self, x)</span>:</span></div><div class="line">		<span class="string">"""</span></div><div class="line">		:type x: int</div><div class="line">		:rtype: int</div><div class="line">		"""</div><div class="line">		MaxInt = (<span class="number">1</span>&lt;&lt;<span class="number">31</span>)<span class="number">-1</span></div><div class="line">		MinInt = -(<span class="number">1</span>&lt;&lt;<span class="number">31</span>)</div><div class="line">		<span class="keyword">if</span> x &gt; <span class="number">0</span>:</div><div class="line">			ans = int(str(x)[::<span class="number">-1</span>])</div><div class="line">		<span class="keyword">else</span>:</div><div class="line">			ans = int(str(-x)[::<span class="number">-1</span>])*(<span class="number">-1</span>)</div><div class="line">		<span class="keyword">if</span> (ans &gt; MaxInt <span class="keyword">or</span> ans &lt; MinInt):</div><div class="line">			ans = <span class="number">0</span></div><div class="line">		<span class="keyword">return</span> ans</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;Problem&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/reverse-integer/description/&quot;&gt;Problem description&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Given a 32-bit signed integer, reverse digits of an integer.&lt;/p&gt;
&lt;p&gt;Example 1:&lt;/p&gt;
&lt;p&gt;Input: 123&lt;br&gt;Output:  321&lt;br&gt;Example 2:&lt;/p&gt;
&lt;p&gt;Input: -123&lt;br&gt;Output: -321&lt;br&gt;Example 3:&lt;/p&gt;
&lt;p&gt;Input: 120&lt;br&gt;Output: 21&lt;br&gt;Note:&lt;br&gt;Assume we are dealing with an environment which could only hold integers within the 32-bit signed integer range. For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.&lt;/p&gt;
    
    </summary>
    
      <category term="Leetcode" scheme="http://jinshendan.github.io/categories/Leetcode/"/>
    
    
      <category term="Integer" scheme="http://jinshendan.github.io/tags/Integer/"/>
    
  </entry>
  
  <entry>
    <title>ZigZag Conversion - Leetcode A6</title>
    <link href="http://jinshendan.github.io/ZigZag-Conversion.html"/>
    <id>http://jinshendan.github.io/ZigZag-Conversion.html</id>
    <published>2017-12-20T16:06:37.000Z</published>
    <updated>2017-12-20T16:48:04.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><p><a href="https://leetcode.com/problems/zigzag-conversion/description/" target="_blank" rel="external">Problem description</a></p>
<p>The string “PAYPALISHIRING” is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">P   A   H   N</div><div class="line">A P L S I I G</div><div class="line">Y   I   R</div></pre></td></tr></table></figure>
<p>And then read line by line: “PAHNAPLSIIGYIR”<br>Write the code that will take a string and make this conversion given a number of rows:</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="built_in">string</span> <span class="title">convert</span><span class="params">(<span class="built_in">string</span> text, <span class="keyword">int</span> nRows)</span></span>;</div></pre></td></tr></table></figure>
<p>convert(“PAYPALISHIRING”, 3) should return “PAHNAPLSIIGYIR”.</p>
<a id="more"></a>
<h2 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h2><ul>
<li>n = number of raws</li>
<li>For first and last line, step = 2n-2</li>
<li>For ith lines (except the first and the last), step = 2n-2-2*i, 2n-2</li>
</ul>
<h2 id="Python-Implementation"><a href="#Python-Implementation" class="headerlink" title="Python Implementation"></a>Python Implementation</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">convert</span><span class="params">(self, s, numRows)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type s: str</div><div class="line">        :type numRows: int</div><div class="line">        :rtype: str</div><div class="line">        """</div><div class="line">        </div><div class="line">        <span class="keyword">if</span> (numRows == <span class="number">1</span>):</div><div class="line">        	<span class="keyword">return</span> s</div><div class="line">        step = numRows * <span class="number">2</span> - <span class="number">2</span></div><div class="line">        ans = <span class="string">""</span></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(numRows):</div><div class="line">        	index = i</div><div class="line">        	step2 = step - i * <span class="number">2</span></div><div class="line">        	<span class="keyword">if</span> (index &gt;= len(s)):</div><div class="line">        		<span class="keyword">break</span></div><div class="line">        	ans += s[index]</div><div class="line">        	<span class="keyword">while</span> (<span class="number">1</span>):</div><div class="line">        		<span class="keyword">if</span> (step2 != <span class="number">0</span> <span class="keyword">and</span> step2 != step):</div><div class="line">        			<span class="keyword">if</span> (index + step2 &gt;= len(s)):</div><div class="line">        				<span class="keyword">break</span></div><div class="line">        			ans += s[index + step2]</div><div class="line">        		</div><div class="line">        		index += step</div><div class="line">        		<span class="keyword">if</span> (index &gt;= len(s)):</div><div class="line">        			<span class="keyword">break</span></div><div class="line">        		ans += s[index]        		</div><div class="line">        <span class="keyword">return</span> ans</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;Problem&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/zigzag-conversion/description/&quot;&gt;Problem description&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The string “PAYPALISHIRING” is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;P   A   H   N&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;A P L S I I G&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Y   I   R&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;And then read line by line: “PAHNAPLSIIGYIR”&lt;br&gt;Write the code that will take a string and make this conversion given a number of rows:&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;convert&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt; text, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; nRows)&lt;/span&gt;&lt;/span&gt;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;convert(“PAYPALISHIRING”, 3) should return “PAHNAPLSIIGYIR”.&lt;/p&gt;
    
    </summary>
    
      <category term="Leetcode" scheme="http://jinshendan.github.io/categories/Leetcode/"/>
    
    
      <category term="Maths" scheme="http://jinshendan.github.io/tags/Maths/"/>
    
  </entry>
  
  <entry>
    <title>Longest Palindromic Substring - Leetcode A5</title>
    <link href="http://jinshendan.github.io/Longest-Palindromic-Substring.html"/>
    <id>http://jinshendan.github.io/Longest-Palindromic-Substring.html</id>
    <published>2017-12-20T14:20:59.000Z</published>
    <updated>2017-12-20T16:10:05.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><p><a href="https://leetcode.com/problems/longest-palindromic-substring/description/" target="_blank" rel="external">Problem description</a><br>Given a string s, find the longest palindromic substring in s. You may assume that the maximum length of s is 1000.</p>
<p>Example:</p>
<p>Input: “babad”</p>
<p>Output: “bab”</p>
<p>Note: “aba” is also a valid answer.</p>
<a id="more"></a>
<h2 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h2><ul>
<li>Dynamic programming, O(n^2)</li>
<li>s[i..j] is a palindromic substring iff s[i+1..j-1] is and s[i] == s[j]</li>
</ul>
<h2 id="Python-Implementation"><a href="#Python-Implementation" class="headerlink" title="Python Implementation"></a>Python Implementation</h2><ul>
<li>Complexity: O(n^2)</li>
<li>Time limit exceeded<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">longestPalindrome</span><span class="params">(self, s)</span>:</span></div><div class="line">		<span class="string">"""</span></div><div class="line">		:type s: str</div><div class="line">		:rtype: str</div><div class="line">		"""</div><div class="line">		f = [[ <span class="keyword">False</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(len(s) + <span class="number">1</span>)] <span class="keyword">for</span> i <span class="keyword">in</span> range(len(s))]</div><div class="line">		<span class="keyword">for</span> i <span class="keyword">in</span> range(len(s)):</div><div class="line">			f[i][<span class="number">1</span>] = <span class="keyword">True</span></div><div class="line">			f[i][<span class="number">0</span>] = <span class="keyword">True</span></div><div class="line">		ans = <span class="number">1</span></div><div class="line">		ansi = <span class="number">0</span></div><div class="line">		lens = len(s)</div><div class="line">		<span class="keyword">for</span> L <span class="keyword">in</span> range(<span class="number">2</span>, lens+<span class="number">1</span>):</div><div class="line">			<span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, lens + <span class="number">1</span> - L):</div><div class="line">				<span class="keyword">if</span> (s[i] == s[i+L<span class="number">-1</span>]):</div><div class="line">					f[i][L] = f[i+<span class="number">1</span>][L<span class="number">-2</span>]</div><div class="line">					<span class="keyword">if</span> (f[i][L]):</div><div class="line">						ans = L</div><div class="line">						ansi = i</div><div class="line">		<span class="keyword">return</span> s[ansi: ansi + ans]</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="C-Implementation"><a href="#C-Implementation" class="headerlink" title="C++ Implementation"></a>C++ Implementation</h2><ul>
<li>Complexity: O(n^2)</li>
<li>Accepted<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="built_in">string</span> <span class="title">longestPalindrome</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> f[<span class="number">1000</span>][<span class="number">1005</span>];</div><div class="line">        <span class="built_in">memset</span>(f, <span class="number">0</span>, <span class="keyword">sizeof</span>(f));</div><div class="line">        <span class="keyword">int</span> n = s.length();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</div><div class="line">        	f[i][<span class="number">0</span>] = f[i][<span class="number">1</span>] = <span class="number">1</span>;</div><div class="line">        <span class="keyword">int</span> ans = <span class="number">1</span>;</div><div class="line">        <span class="keyword">int</span> ansi = <span class="number">0</span>;</div><div class="line">       	<span class="keyword">for</span> (<span class="keyword">int</span> L = <span class="number">2</span>; L &lt;= n; L++) &#123;</div><div class="line">       		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n - L; i++)&#123;</div><div class="line">       			<span class="keyword">if</span> (s[i] == s[i + L <span class="number">-1</span>])</div><div class="line">       				f[i][L] = f[i+<span class="number">1</span>][L<span class="number">-2</span>];</div><div class="line">       			<span class="keyword">if</span> (f[i][L])&#123;</div><div class="line">       				ans = L;</div><div class="line">       				ansi = i;</div><div class="line">       			&#125;</div><div class="line">       		&#125;</div><div class="line">       	&#125;</div><div class="line">       	<span class="keyword">return</span> s.substr(ansi, ans);</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;Problem&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/longest-palindromic-substring/description/&quot;&gt;Problem description&lt;/a&gt;&lt;br&gt;Given a string s, find the longest palindromic substring in s. You may assume that the maximum length of s is 1000.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;p&gt;Input: “babad”&lt;/p&gt;
&lt;p&gt;Output: “bab”&lt;/p&gt;
&lt;p&gt;Note: “aba” is also a valid answer.&lt;/p&gt;
    
    </summary>
    
      <category term="Leetcode" scheme="http://jinshendan.github.io/categories/Leetcode/"/>
    
    
      <category term="DP" scheme="http://jinshendan.github.io/tags/DP/"/>
    
  </entry>
  
  <entry>
    <title>Median of two sorted arrays - Leetcode A4</title>
    <link href="http://jinshendan.github.io/Median-of-two-sorted-arrays.html"/>
    <id>http://jinshendan.github.io/Median-of-two-sorted-arrays.html</id>
    <published>2017-12-19T21:45:53.000Z</published>
    <updated>2017-12-20T15:51:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><p><a href="https://leetcode.com/problems/median-of-two-sorted-arrays/description/" target="_blank" rel="external">Problem description</a></p>
<p>There are two sorted arrays nums1 and nums2 of size m and n respectively.</p>
<p>Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).</p>
<a id="more"></a>
<h2 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h2><ul>
<li>Binary Search</li>
<li>K-th elements in two sorted arrays</li>
</ul>
<h2 id="Python-Implementation"><a href="#Python-Implementation" class="headerlink" title="Python Implementation"></a>Python Implementation</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">get_k_th</span><span class="params">(self, a, b, n, m, k)</span>:</span></div><div class="line">		<span class="keyword">if</span> (n &lt;= <span class="number">0</span>): <span class="keyword">return</span> b[k<span class="number">-1</span>]</div><div class="line">		<span class="keyword">if</span> (m &lt;= <span class="number">0</span>): <span class="keyword">return</span> a[k<span class="number">-1</span>]</div><div class="line">		<span class="keyword">if</span> (k == <span class="number">1</span>): <span class="keyword">return</span> min(a[<span class="number">0</span>], b[<span class="number">0</span>])</div><div class="line">		<span class="keyword">if</span> (b[m // <span class="number">2</span>] &gt;= a[n // <span class="number">2</span>]):</div><div class="line">			<span class="keyword">if</span> n//<span class="number">2</span> + m // <span class="number">2</span> + <span class="number">2</span> &gt; k:</div><div class="line">				<span class="keyword">return</span> self.get_k_th(a, b, n, m//<span class="number">2</span>, k)</div><div class="line">			<span class="keyword">else</span>:</div><div class="line">				<span class="keyword">return</span> self.get_k_th(a[n//<span class="number">2</span>+<span class="number">1</span>:], b, n - (n//<span class="number">2</span>+<span class="number">1</span>), m, k - (n // <span class="number">2</span> + <span class="number">1</span>))</div><div class="line">		<span class="keyword">else</span>:</div><div class="line">			<span class="keyword">if</span> n//<span class="number">2</span> + m // <span class="number">2</span> + <span class="number">2</span> &gt; k:</div><div class="line">				<span class="keyword">return</span> self.get_k_th(a, b, n//<span class="number">2</span>, m, k)</div><div class="line">			<span class="keyword">else</span>:</div><div class="line">				<span class="keyword">return</span> self.get_k_th(a, b[m//<span class="number">2</span>+<span class="number">1</span>:], n, m - (m//<span class="number">2</span>+<span class="number">1</span>), k - (m // <span class="number">2</span> + <span class="number">1</span>))</div><div class="line"></div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">findMedianSortedArrays</span><span class="params">(self, nums1, nums2)</span>:</span></div><div class="line">		<span class="string">"""</span></div><div class="line">		:type nums1: List[int]</div><div class="line">		:type nums2: List[int]</div><div class="line">		:rtype: float</div><div class="line">		"""</div><div class="line"></div><div class="line">		n = len(nums1)</div><div class="line">		m = len(nums2)</div><div class="line">		<span class="keyword">if</span> (n + m) % <span class="number">2</span> == <span class="number">0</span>:</div><div class="line">			<span class="keyword">return</span> (self.get_k_th(nums1, nums2, n, m, (n+m)//<span class="number">2</span>) + self.get_k_th(nums1, nums2, n, m, (n+m)//<span class="number">2</span> +<span class="number">1</span>)) / <span class="number">2</span></div><div class="line">		<span class="keyword">else</span>:</div><div class="line">			<span class="keyword">return</span> self.get_k_th(nums1, nums2, n, m, (n+m)//<span class="number">2</span>+<span class="number">1</span>)</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;Problem&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/median-of-two-sorted-arrays/description/&quot;&gt;Problem description&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;There are two sorted arrays nums1 and nums2 of size m and n respectively.&lt;/p&gt;
&lt;p&gt;Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).&lt;/p&gt;
    
    </summary>
    
      <category term="Leetcode" scheme="http://jinshendan.github.io/categories/Leetcode/"/>
    
    
      <category term="Binary Search" scheme="http://jinshendan.github.io/tags/Binary-Search/"/>
    
  </entry>
  
  <entry>
    <title>Longest substring without repeating characters - Leetcode A3</title>
    <link href="http://jinshendan.github.io/longest-substring-without-repeating-characters.html"/>
    <id>http://jinshendan.github.io/longest-substring-without-repeating-characters.html</id>
    <published>2017-12-19T21:36:31.000Z</published>
    <updated>2017-12-19T21:44:09.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><p><a href="https://leetcode.com/problems/longest-substring-without-repeating-characters/description/" target="_blank" rel="external">Problem description</a>.</p>
<p>Given a string, find the length of the longest substring without repeating characters.</p>
<p>Examples:</p>
<p>Given “abcabcbb”, the answer is “abc”, which the length is 3.</p>
<p>Given “bbbbb”, the answer is “b”, with the length of 1.</p>
<p>Given “pwwkew”, the answer is “wke”, with the length of 3. Note that the answer must be a substring, “pwke” is a subsequence and not a substring.</p>
<a id="more"></a>
<h2 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h2><ul>
<li>Sliding window</li>
</ul>
<h2 id="Python-Implementation"><a href="#Python-Implementation" class="headerlink" title="Python Implementation"></a>Python Implementation</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(self, s)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type s: str</div><div class="line">        :rtype: int</div><div class="line">        """</div><div class="line">        ss = set()</div><div class="line">        start = <span class="number">0</span></div><div class="line">        maxlen = <span class="number">0</span></div><div class="line">        <span class="keyword">for</span> i, x <span class="keyword">in</span> enumerate(s):</div><div class="line">        	<span class="keyword">while</span> x <span class="keyword">in</span> ss:</div><div class="line">        		ss.remove(s[start])</div><div class="line">        		start += <span class="number">1</span></div><div class="line">        	ss.add(x)</div><div class="line">        	maxlen = max(maxlen, i - start + <span class="number">1</span>)</div><div class="line">        	<span class="comment"># print(start, i, maxlen)</span></div><div class="line">        <span class="keyword">return</span> maxlen</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;Problem&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/longest-substring-without-repeating-characters/description/&quot;&gt;Problem description&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Given a string, find the length of the longest substring without repeating characters.&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;p&gt;Given “abcabcbb”, the answer is “abc”, which the length is 3.&lt;/p&gt;
&lt;p&gt;Given “bbbbb”, the answer is “b”, with the length of 1.&lt;/p&gt;
&lt;p&gt;Given “pwwkew”, the answer is “wke”, with the length of 3. Note that the answer must be a substring, “pwke” is a subsequence and not a substring.&lt;/p&gt;
    
    </summary>
    
      <category term="Leetcode" scheme="http://jinshendan.github.io/categories/Leetcode/"/>
    
    
      <category term="sliding window" scheme="http://jinshendan.github.io/tags/sliding-window/"/>
    
  </entry>
  
  <entry>
    <title>Add Two Numbers - Leetcode A2</title>
    <link href="http://jinshendan.github.io/Add-Two-Numbers.html"/>
    <id>http://jinshendan.github.io/Add-Two-Numbers.html</id>
    <published>2017-12-19T21:25:52.000Z</published>
    <updated>2017-12-19T21:40:08.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><p><a href="https://leetcode.com/problems/add-two-numbers/description/" target="_blank" rel="external">Problem description</a>.</p>
<p>You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.</p>
<p>You may assume the two numbers do not contain any leading zero, except the number 0 itself.</p>
<a id="more"></a>
<h2 id="Python-Implementation"><a href="#Python-Implementation" class="headerlink" title="Python Implementation"></a>Python Implementation</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Definition for singly-linked list.</span></div><div class="line"><span class="comment"># class ListNode(object):</span></div><div class="line"><span class="comment">#     def __init__(self, x):</span></div><div class="line"><span class="comment">#         self.val = x</span></div><div class="line"><span class="comment">#         self.next = None</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addTwoNumbers</span><span class="params">(self, l1, l2)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type l1: ListNode</div><div class="line">        :type l2: ListNode</div><div class="line">        :rtype: ListNode</div><div class="line">        """</div><div class="line">        tete = ListNode(<span class="number">0</span>)</div><div class="line">        pre = tete</div><div class="line">        t = <span class="number">0</span></div><div class="line">        <span class="keyword">while</span> (l1 != <span class="keyword">None</span> <span class="keyword">or</span> l2 != <span class="keyword">None</span>):</div><div class="line">            node = ListNode(<span class="number">0</span>)</div><div class="line">            pre.next = node</div><div class="line">            <span class="keyword">if</span> (l1 == <span class="keyword">None</span>):</div><div class="line">                node.val =  (l2.val + t) % <span class="number">10</span></div><div class="line">                t = (l2.val + t) // <span class="number">10</span></div><div class="line">                l2 = l2.next</div><div class="line">            <span class="keyword">elif</span> (l2 == <span class="keyword">None</span>):</div><div class="line">                node.val = (l1.val + t) % <span class="number">10</span></div><div class="line">                t = (l1.val + t) // <span class="number">10</span></div><div class="line">                l1 = l1.next</div><div class="line">            <span class="keyword">else</span>: </div><div class="line">                node.val = (l1.val + l2.val + t) % <span class="number">10</span></div><div class="line">                t = (l1.val + l2.val + t) // <span class="number">10</span></div><div class="line">                l1 = l1.next</div><div class="line">                l2 = l2.next</div><div class="line">            pre = node</div><div class="line">        </div><div class="line">        <span class="keyword">if</span> (t &gt; <span class="number">0</span>):</div><div class="line">            node = ListNode(t)</div><div class="line">            pre.next = node</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> tete.next</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;Problem&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/add-two-numbers/description/&quot;&gt;Problem description&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.&lt;/p&gt;
&lt;p&gt;You may assume the two numbers do not contain any leading zero, except the number 0 itself.&lt;/p&gt;
    
    </summary>
    
      <category term="Leetcode" scheme="http://jinshendan.github.io/categories/Leetcode/"/>
    
    
      <category term="linked list" scheme="http://jinshendan.github.io/tags/linked-list/"/>
    
  </entry>
  
  <entry>
    <title>Approximation algorithm of Knapsack problem</title>
    <link href="http://jinshendan.github.io/APX-knapsack.html"/>
    <id>http://jinshendan.github.io/APX-knapsack.html</id>
    <published>2017-08-16T23:13:00.000Z</published>
    <updated>2017-11-01T10:42:41.000Z</updated>
    
    <content type="html"><![CDATA[<script type="text/x-mathjax-config">
MathJax.Hub.Config({
tex2jax: {inlineMath: [['$','$'], ['\\(','\\)']]}
});
</script>

<script type="text/javascript" async src="https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-MML-AM_CHTML">
</script>

<a id="more"></a>
<h2 id="Knapsack-problem"><a href="#Knapsack-problem" class="headerlink" title="Knapsack problem"></a>Knapsack problem</h2><hr>
<p>We have an algorithm (dynamic programming) when values are small integers.</p>
<h3 id="Approximation-algorithm"><a href="#Approximation-algorithm" class="headerlink" title="Approximation algorithm"></a>Approximation algorithm</h3><hr>
<ul>
<li><p>Idea: modify input so that values are small integers and we can then use the previous algorithm as a black box.</p>
</li>
<li><p>Scale and round.</p>
</li>
</ul>
<h3 id="Algorithm-description"><a href="#Algorithm-description" class="headerlink" title="Algorithm description"></a>Algorithm description</h3><hr>
<ol>
<li>Discard items that don’t fit in the knapsack.</li>
<li>Multiply each value by $\alpha = \frac{N}{max_j {v_j}} $ so that the values become small, where $N$ is the maximum scaled value, $$v_i \leftarrow v_i * \alpha$$.</li>
<li>Round values to integers and use the DP to solve the reduced problem.</li>
</ol>
<p>We have to choose $N$,</p>
<ul>
<li>small enough that the runtime is polynomial;</li>
<li>large enough that the result is closed to OPT.</li>
</ul>
<h3 id="Runtime-analysis"><a href="#Runtime-analysis" class="headerlink" title="Runtime analysis"></a>Runtime analysis</h3><hr>
<ul>
<li>DP: $O(n*m)$.</li>
<li>Apx: $m = n*N$, $O(n^2N)$.</li>
</ul>
<h3 id="Approximation-ratio-analysis"><a href="#Approximation-ratio-analysis" class="headerlink" title="Approximation ratio analysis"></a>Approximation ratio analysis</h3><hr>
<ul>
<li>Let $S$ be output items, then $S$ is optimal for the reduced input.</li>
<li>Let $S^{*}$ be optimal items, then $S$ is optimal for the scaled unrounded input since scaling do not change structure.</li>
</ul>
<ul>
<li>$Value(S) = \sum_S{v_i} = \frac{1}{\alpha}\sum_S(\alpha v_i)$, then $Value(S) \geq \frac{1}{\alpha}\sum_S{v^{‘}_i}$.</li>
<li>\(\sum_S v^{‘}<em>i \geq \sum</em>{S^{*}} \sum_S \)</li>
</ul>
<p>since $S$ is optimal for reduced problem.</p>
]]></content>
    
    <summary type="html">
    
      &lt;script type=&quot;text/x-mathjax-config&quot;&gt;
MathJax.Hub.Config({
tex2jax: {inlineMath: [[&#39;$&#39;,&#39;$&#39;], [&#39;\\(&#39;,&#39;\\)&#39;]]}
});
&lt;/script&gt;

&lt;script type=&quot;text/javascript&quot; async
  src=&quot;https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-MML-AM_CHTML&quot;&gt;
&lt;/script&gt;
    
    </summary>
    
      <category term="approximation" scheme="http://jinshendan.github.io/categories/approximation/"/>
    
    
      <category term="approximation" scheme="http://jinshendan.github.io/tags/approximation/"/>
    
      <category term="dp" scheme="http://jinshendan.github.io/tags/dp/"/>
    
      <category term="rounding" scheme="http://jinshendan.github.io/tags/rounding/"/>
    
  </entry>
  
  <entry>
    <title>generator - Regionals 2015 Asia-Hangzhou</title>
    <link href="http://jinshendan.github.io/generator.html"/>
    <id>http://jinshendan.github.io/generator.html</id>
    <published>2017-04-18T20:00:12.000Z</published>
    <updated>2017-04-18T20:10:03.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><p>We generate a random string by generating a sequence of random characters and concatenating them together. Each character is chosen independently from the first n letters in the English alphabet with equal probability. Only capital letters are used in this problem. The generation is stopped as soon as a specific pattern occurs in the random string. Your task is to predict the expected length of the generated string.</p>
<h2 id="Limits"><a href="#Limits" class="headerlink" title="Limits"></a>Limits</h2><ul>
<li>1 &lt;= T &lt;= 10.</li>
<li>1 &lt;= n &lt;= 26.</li>
<li>The length of any pattern will not exceed 12.</li>
</ul>
<a id="more"></a>
<h2 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h2><ul>
<li>For any string S, define the function state(S) as the maximal length of the prefix of pattern which is also a suffix of the current string at the same time.</li>
<li>If the pattern has length L, then the state of any string is a number between 0 and L. </li>
<li>We know that L is a final state. </li>
<li>Let’s define f[i] as the expected number of steps from state i to state L. </li>
<li>Then we have f[i] = 1+ 1/n(f[a(1,1)]+f[a(1,2)]+…+f[a(1,n)]), where a(i,j) is the state of the new string after concatenating the current string and the j-th letter together. </li>
<li>Thus, the answer is f[0].</li>
</ul>
<h2 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a>Notes</h2><ul>
<li>We can use brute-force to compute a(i,j).</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;Problem&lt;/h2&gt;&lt;p&gt;We generate a random string by generating a sequence of random characters and concatenating them together. Each character is chosen independently from the first n letters in the English alphabet with equal probability. Only capital letters are used in this problem. The generation is stopped as soon as a specific pattern occurs in the random string. Your task is to predict the expected length of the generated string.&lt;/p&gt;
&lt;h2 id=&quot;Limits&quot;&gt;&lt;a href=&quot;#Limits&quot; class=&quot;headerlink&quot; title=&quot;Limits&quot;&gt;&lt;/a&gt;Limits&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;1 &amp;lt;= T &amp;lt;= 10.&lt;/li&gt;
&lt;li&gt;1 &amp;lt;= n &amp;lt;= 26.&lt;/li&gt;
&lt;li&gt;The length of any pattern will not exceed 12.&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="LA" scheme="http://jinshendan.github.io/categories/LA/"/>
    
    
      <category term="Probability" scheme="http://jinshendan.github.io/tags/Probability/"/>
    
      <category term="DP" scheme="http://jinshendan.github.io/tags/DP/"/>
    
  </entry>
  
  <entry>
    <title>Coupons - UVA 10288</title>
    <link href="http://jinshendan.github.io/Coupons.html"/>
    <id>http://jinshendan.github.io/Coupons.html</id>
    <published>2017-04-18T19:50:10.000Z</published>
    <updated>2017-04-18T20:10:19.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><p>There are n coupons numbered from 1 to n. How many times on average are required to make a complete set of n coupons<br>by selecting one coupon each time? </p>
<p>If the answer is an integer number, output the number. If the answer is not integer, then output the integer part of the answer followed by a space and then by the proper fraction in the format Num/Denom. The fractional part should be irreducible.</p>
<h2 id="Limits"><a href="#Limits" class="headerlink" title="Limits"></a>Limits</h2><ul>
<li>1 &lt;= n &lt;= 33</li>
</ul>
<a id="more"></a>
<h2 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h2><ul>
<li>Assume that we have already k different coupons.</li>
<li>Then the probability of getting a new different coupon is (n-k)/n. The expected cost is n/(n-k). </li>
<li>Thus the expected number of times to make a complete set of n coupons is n/n+n/(n-1)+…+n/1 = n(1/1+1/2+1/3+…+1/n).</li>
</ul>
<h2 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a>Notes</h2><ul>
<li>Make the fractional part irreducible after each addition to avoid any over 64 bits integers.</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;Problem&lt;/h2&gt;&lt;p&gt;There are n coupons numbered from 1 to n. How many times on average are required to make a complete set of n coupons&lt;br&gt;by selecting one coupon each time? &lt;/p&gt;
&lt;p&gt;If the answer is an integer number, output the number. If the answer is not integer, then output the integer part of the answer followed by a space and then by the proper fraction in the format Num/Denom. The fractional part should be irreducible.&lt;/p&gt;
&lt;h2 id=&quot;Limits&quot;&gt;&lt;a href=&quot;#Limits&quot; class=&quot;headerlink&quot; title=&quot;Limits&quot;&gt;&lt;/a&gt;Limits&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;1 &amp;lt;= n &amp;lt;= 33&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="UVA" scheme="http://jinshendan.github.io/categories/UVA/"/>
    
    
      <category term="Probability" scheme="http://jinshendan.github.io/tags/Probability/"/>
    
      <category term="Fraction" scheme="http://jinshendan.github.io/tags/Fraction/"/>
    
  </entry>
  
</feed>
